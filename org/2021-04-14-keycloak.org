#+TITLE: keycloak
#+STARTUP: indent
* keycloak
redhat的开源认证方案，支持多种认证模型，基于角色Permission，和细粒度Permission
docker run -d -p 8080:8080 --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:12.0.4
** provider
*** user storage provider(federation)
**** kerboro
**** LDAP
**** custom
默认只支持keboro和LDAP，如果要自己接入，要自定义Provider进行打包，存在两种部署的做法
1. Keycloak Deployer，直接丢进/opt/jboss/keycloak/standalone/deployments，jBoss会自动解包(类似Tomcat)
2. 涉及自定义的SPI，Register a provider using Modules
https://www.baeldung.com/java-keycloak-custom-user-providers
https://www.keycloak.org/docs/latest/server_development/#_providers

常规情况下，使用第一种，可以用内嵌keycloak在JUnit对provider进行测试，之后打包部署即可(12.0.4 embbedded启动有问题，待处理)
** realm
多个共享账户的域，用于区分多个账号体系
** client
多个接入的app
** client code
一组Mapper，用于映射字段

scope配置role，描述-->在登陆的用户拥有该角色时该scope的Mapper才生效，没有则代表全部都生效
** Roles
纯字段描述
** mysql as db
https://stackoverflow.com/questions/62107991/keycloak-in-docker-container-mysql-on-host-gives-org-keycloak-services-serv
** code demo
#+BEGIN_SRC java
session.getKeycloakSessionFactory().getProviderFactories(UserStorageProvider.class) //factory

((DefaultKeycloakSession) ksession).context.getRealm().getUserStorageProviders() // model



        List<T> list = new LinkedList<>();
        for (UserStorageProviderModel model : getStorageProviders(realm)) {
            if (!model.isEnabled()) continue;
            UserStorageProviderFactory factory = (UserStorageProviderFactory) session.getKeycloakSessionFactory().getProviderFactory(UserStorageProvider.class, model.getProviderId());
            if (factory == null) {
                logger.warnv("Configured UserStorageProvider {0} of provider id {1} does not exist in realm {2}", model.getName(), model.getProviderId(), realm.getName());
                continue;
            }
            if (Types.supports(type, factory, UserStorageProviderFactory.class)) {
                list.add(type.cast(getStorageProviderInstance(session, model, factory)));
            }


        }

// 拿出工厂
session.getKeycloakSessionFactory().getProviderFactories(UserStorageProvider.class).stream().collect(Collectors.toMap(Object::getClass, Function.identity())).get(CustomUserStorageProviderFactory.class)

((DefaultKeycloakSession) session).context.getRealm().getUserStorageProviders()
#+END_SRC
* theme
https://stackoverflow.com/questions/52641379/keycloak-deploy-custom-theme-in-docker/52755388
* debug
https://groups.google.com/g/keycloak-user/c/4QMfloC9cho
* admin rest api
存在两种调用法: 
1. 一种基于账号体系本身里的账号
2. 基于service account(即client_id和client_secret换token来调用)
* 权限相关
如使用一个账号访问自定义的Endpoint Resource，
Clients --> Admin-cli  --> Scope
* provider
除非必要，否则不建议拿来用，版本升级可能被废弃
** 持久存在
如果要拿，可以直接一步到位，直接拿provider
*** hostname
*** event listener
** each request each instance(light-weight object)
比较像EntityManager和对应的Factory
拿的时候只能先拿工厂，在拿去建Provider
*** Authenticator
*** IDP provider
* deploy
1. Keycloak Deployer (most case)
2. 有自己定制的SPI需要部署
* dependencies
jboss-deployment-structure.xml用途
1. 将keycloak services的私有依赖提供给拓展包
2. 使用Keycloak Runtime已经存在的环境依赖
* extenstion point
1. 现有的SPI如UserStorageProviderFactory(外部存储)，SocialIdentityProviderFactory(social login)
2. 抽象出新的SPI
* flow
** subflow
** executions
* genenral
#+BEGIN_SRC bash
# allow remote connect
xxx.sh -b 0.0.0.0
#+END_SRC
* social account
** 登录的情况下绑定
#+BEGIN_SRC java
// 需要作判定处理，因为会回调，否则会死循环，该处少判断
    @GetMapping("wechat/link")
    public void wechatlink(@AuthenticationPrincipal KeycloakAuthenticationToken principle, HttpServletRequest request, HttpServletResponse response) {
        AccessToken token = principle.getAccount().getKeycloakSecurityContext().getToken();
        String clientId = token.getIssuedFor();
        String nonce = UUID.randomUUID().toString();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }


        String provider = "wechat";
        String input = nonce + token.getSessionState() + clientId + provider;
        byte[] check = md.digest(input.getBytes(StandardCharsets.UTF_8));
        String hash = Base64Url.encode(check);
        request.getSession().setAttribute("hash", hash);
        String redirectUri = KeycloakUriBuilder.fromUri(request.getRequestURL().toString())
                .replaceQuery(null)
                .queryParam("response", "true").build().toString();
        String accountLinkUrl = KeycloakUriBuilder.fromUri("http://bsite.auth.dev.gobrand.top")
                .path("/auth/realms/{realm}/broker/{provider}/link")
                .queryParam("nonce", nonce)
                .queryParam("hash", hash)
                .queryParam("client_id", token.getIssuedFor())
                .queryParam("redirect_uri", redirectUri).build(keycloakSpringBootProperties.getRealm(), provider).toString();
        response.setStatus(302);
        response.setHeader("Location", accountLinkUrl);
    }

#+END_SRC
* spring session
接入后无法back channel logout
原因:
url mapping是以Valve形式注入Tomcat，而Spring Session的替换是在后面的Filter

解决方式(将Valve的Session管理注入Redis，一起删除),下述为步骤:
1. 自定义新的Custominzer将Redis管理注入Valve，改写删除Session的逻辑
1. 默认的KeycloakAutoConfiguration下的Customize没设置Order(Spring逻辑为最小)，而注入Valve的Customizer必须在最后生效，因此，需要DestructionAwareBeanPostProcessor将默认的级别调高，确保自定义的在最后生效

#+begin_src java
@Slf4j
@Component
public class BeanFactoryOrderWrapper implements DestructionAwareBeanPostProcessor {
    @Override
    public void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException {

    }

    @Override
    public boolean requiresDestruction(Object bean) {
        return true;
    }

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        if (beanName.equals("getKeycloakContainerCustomizer")) {
            Object wrapRes = this.wrapOrder(bean);
            return wrapRes;
        }
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        return bean;
    }

    private Object wrapOrder(Object bean) {
        log.info("rewrite keycloak auto config customizer Order for next custom");
        final WebServerFactoryCustomizer origin = (WebServerFactoryCustomizer) bean;
        return new KeycloakContainerCustomizerWithOrder(origin);
    }
}

class KeycloakContainerCustomizerWithOrder implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory>, Ordered {

    private final WebServerFactoryCustomizer origin;

    public KeycloakContainerCustomizerWithOrder(WebServerFactoryCustomizer origin) {
        this.origin = origin;
    }

    @Override
    public void customize(ConfigurableServletWebServerFactory factory) {
        origin.customize(factory);
    }

    @Override
    public int getOrder() {
        return Ordered.LOWEST_PRECEDENCE - 1; // 调高一点优先级，确保调用顺序，自定义的Custominzer可以不用加Order，反正默认直接最低了
    }
}
#+end_src
* token
SSO Session Max  --> 控制过期和刷新时间的最大边界

Access Token Lifespan  --> 过期时间

SSO Session Idle --> 刷新时间
* ref
# recaptcha
https://github.com/raptor-group/keycloak-login-recaptcha


https://www.cnblogs.com/Zhang-Xiang/p/14777202.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+cnblogs%2FwhQe+%28%E5%8D%9A%E5%AE%A2%E5%9B%AD_%E9%A6%96%E9%A1%B5%29 
** backend
https://blog.csdn.net/little_kelvin/article/details/111239241
https://blog.csdn.net/little_kelvin/article/details/111303674
https://www.baeldung.com/postman-keycloak-endpoints postman endpoint test
https://lists.jboss.org/pipermail/keycloak-user/2018-September/015412.html  dependencies missiong, result no class found
https://github.com/Jeff-Tian/keycloak-services-social-weixin non-standarad idp such as wechat
https://github.com/mrk08/keycloak-vk/blob/master/src/main/java/ru/codecamp/keycloak/social/vk/VKIdentityProvider.java non-standarad refer
https://stackoverflow.com/questions/50143342/keycloak-backchannel-logout back channel logout
https://www.zhihu.com/question/302288255 user federation and sms
** frontend
https://stackoverflow.com/questions/65020000/using-keycloak-in-vue3-but-not-on-startup
** cors
https://lists.jboss.org/pipermail/keycloak-user/2017-September/011890.html
** link
https://blog.csdn.net/zollty/article/details/111315146

realmA登录realmB，等价于自链接
https://zhuanlan.zhihu.com/p/360846976
** document
https://www.keycloak.org/docs/12.0/server_development/index.html
** keycloak self security
https://stackoverflow.com/questions/54482881/keycloak-custom-spi-rest-endpoint-with-authorization custom rest api with permission
