#+TITLE: spring security
#+STARTUP: indent
* <security:http>
** access
*** isFullyAuthenticated()
访问对应资源时会弹窗，可以修改默认的认证页面
*** permitAll()
允许全部情况的访问
*** isAnonymous()
没登录能访问，登录了就访问不了
* <security:form-login>
** login-page
自定义登录页
** login-processing-url
自定义登录请求，需要设置CSRF关闭为true
* <security:authentication-manager>
** <security:authentication-provider>
* 自定义权限的动态获取
实现UserDetailService接口
#+BEGIN_SRC xml
<bean id="userDetailServiceImpl1" class="org.example.security.UserDetailServiceImpl1"/>
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userDetailServiceImpl1"/>

    </security:authentication-manager>
UserDetail接口是返回值
#+END_SRC
* 认证完行为修改
默认是进行页面的跳转，如果需要返回json数值，需要实现如下接口
** authenticationsuccesshandler
成功时行为
** AuthenticationFailureHandler
失败时行为
* remember me
前端需要配置属性remember-me的字段(字段名固定)，然后服务器会往回写入remember-me的cookie(存着token)，在关闭网页(会话信息丢失后)，重新进入时，会使用remember-me这个cookie进行验证
** 配置
#+BEGIN_SRC xml
<security:http>
  <security:remember-me token-repository-ref="jdbcTokenRepository" token-validity-seconds="3600"/>
</security:http>

<bean id="jdbcTokenRepository" class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
     <property name="dataSource" ref="dataSource"/>
    <!-- <property name="createTableOnStartup" value="true"/>-->
</bean>
#+END_SRC
** springboot
rememberMe().tokenRepository(persistentTokenRepository()).tokenValiditySeconds(60*60)
* SecurityContextHolder
可以获取认证后的信息
#+BEGIN_SRC java
Object principal =
        SecurityContextHolder.getContext().getAuthentication().getPrincipal();
if (principal != null) {
    if (principal instanceof UserDetails) {
        UserDetails userDetails = (UserDetails) principal;
        String username = userDetails.getUsername();
        model.addAttribute("username", username);
    }
}
#+END_SRC
* PasswordEncoder
#+BEGIN_SRC java
<security:authentication-manager>
    <security:authentication-provider user-service-ref="userDetailServiceImpl1">
        <security:password-encoder ref="passwordEncoder"/>
    </security:authentication-provider>
</security:authentication-manager>
#+END_SRC
* springboot
** 配置
#+BEGIN_SRC java
@Configuration
@EnableWebSecurity  //启动SpringSecurity过滤器链
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {

    //该方法的作用就是代替之前配置：<security:authentication-manager>
    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication().withUser("eric").password("123456").authorities("PRODUCT_ADD","PRODUCT_UPDATE");
    }

    //该方法的作用就是代替之前配置：<security:http>
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/product/add").hasAuthority("PRODUCT_ADD")
                .antMatchers("/product/update").hasAuthority("PRODUCT_UPDATE")
                .antMatchers("/product/list").hasAuthority("PRODUCT_LIST")
                .antMatchers("/product/delete").hasAuthority("PRODUCT_DELETE")
                .antMatchers("/login").permitAll()
                .antMatchers("/**")
                .fullyAuthenticated()
                .and()
                .formLogin().loginPage("/login")
                .and()
                .csrf().disable();
    }
}

@Configuration
public class ErrorPageConfig {

    @Bean
    public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){
        return new EmbeddedServletContainerCustomizer(){

            //ErrorPage:定义错误页面
            //参数一：HttpStatus.FORBIDDEN： 该错误接收什么错误状态码
            //参数二：交给哪个请求处理
            @Override
            public void customize(ConfigurableEmbeddedServletContainer container) {
                container.addErrorPages(new ErrorPage(HttpStatus.FORBIDDEN,"/403"));
            }
        };

    }
}
#+END_SRC
* 自定义Filter
** OncePerRequestFilter
验证码过滤器，在UsernamePasswordAuthenticationFilter前生效即可
#+BEGIN_SRC java
//实现OncePerRequestFilter, 然后配置文件指定生效的位置
public class ImageCodeAuthenticationFilter extends OncePerRequestFilter {

    private AuthenticationFailureHandler authenticationFailureHandler;

    public void setAuthenticationFailureHandler(AuthenticationFailureHandler authenticationFailureHandler) {
        this.authenticationFailureHandler = authenticationFailureHandler;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
// do something
        filterChain.doFilter(request,response);
    }
}

#+END_SRC
#+BEGIN_SRC xml
<!--before/after指定在哪个过滤器之前,FORM_LOGIN_FILTER是UsernamePasswordAuthenticationFilter-->
<security:http>
    <security:custom-filter ref="beanId" before="FORM_LOGIN_FILTER"/>
</security:http>
#+END_SRC
* 坑
** 写死认证信息的情况
#+BEGIN_SRC xml
    <bean id="passwordEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"></bean>
#+END_SRC
5.x之后, 如果写死的认证信息密码是明文，则需要配置该bean，以指定不加密，否则会报错，另一种做法则是密码配置使用明文加密后的结果。格式如{bcrypt}$2a$10$rY/0dflGbwW6L1yt4RVA4OH8aocD7tvMHoChyKY/XtS4DXKr.JbTC
ref https://blog.csdn.net/feinifi/article/details/80959225
** 配置json登录
1. 自定义UsernamePasswordAuthenticationFilter进行旧接口替换
2. 关闭csrf
#+BEGIN_SRC java
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled=true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private final UserDetailsService userDetailsService;
    private final AuthenticationSuccessHandler authenticationSuccessHandler;
    private final AuthenticationFailureHandler authenticationFailureHandler;

    public SecurityConfig(UserDetailsService userDetailsService, AuthenticationSuccessHandler authenticationSuccessHandler, AuthenticationFailureHandler authenticationFailureHandler) {
        this.userDetailsService = userDetailsService;
        this.authenticationSuccessHandler = authenticationSuccessHandler;
        this.authenticationFailureHandler = authenticationFailureHandler;
    }

    @Bean
    PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.cors().
                and()
                .authorizeRequests()
                .antMatchers("/demo_without_auth").permitAll()
				.anyRequest().authenticated()
				.and().
                addFilterAt(usernamePasswordAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class)
                .formLogin().
                and()
                .httpBasic()
                .and()
                .csrf().disable();

//        http.authorizeRequests().anyRequest().permitAll();
    }

    @Bean
    public UsernamePasswordAuthenticationFilter usernamePasswordAuthenticationFilter() throws Exception {
        UsernamePasswordAuthenticationFilter usernamePasswordAuthenticationFilter = new MyUsernamePasswordAuthenticationFilter();
        usernamePasswordAuthenticationFilter.setAuthenticationManager(super.authenticationManagerBean());
        usernamePasswordAuthenticationFilter.setAuthenticationSuccessHandler(authenticationSuccessHandler);
        usernamePasswordAuthenticationFilter.setAuthenticationFailureHandler(authenticationFailureHandler);
        return usernamePasswordAuthenticationFilter;
    }
}

#+END_SRC
** 多账户登录
应该统一endpoint，由客户端指定账户类型，后端可以再UserService处注入httprequest读取账户类型，第二种方案是重写provider来进行自定义数据类型保存
** 5.0之后默认PasswordEncoder match设计变成{加密类型}加密密码，即要么换，要么使用新的生成策略
** cors
auth url默认不走CorsFilter，需要手动加进去
配置随着版本变更，会有各种类型的写法配置，
*** 2.4.3
#+BEGIN_SRC java
@Configuration
public class CORSConfig {
    @Value("${gobrand.cors-domain}")
    private String corsDomain;

    @Value("${gobrand.protocol}")
    private String protocol;

    private CorsConfiguration buildConfig() {
        CorsConfiguration corsConfiguration = new CorsConfiguration();
        final String origin = String.format("%s://%s", protocol, corsDomain);
        corsConfiguration.addAllowedOrigin(origin); // 1允许任何域名使用
        corsConfiguration.addAllowedHeader("*"); // 2允许任何头
        corsConfiguration.addAllowedMethod("*"); // 3允许任何方法（post、get等）
        corsConfiguration.setAllowCredentials(true);
        return corsConfiguration;
    }

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", buildConfig()); // 4
        return new CorsFilter(source);
    }
}

#+END_SRC
** 非标准flow如国内
#+BEGIN_SRC java
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .addFilter(corsFilter)
//                .addFilter(passwordIdentityAuthenticationFilter())
                .authorizeRequests()
                .antMatchers("/client/**").permitAll()
                .antMatchers(HttpMethod.GET, "/user/activity/{\\d+}").permitAll()
                .antMatchers(HttpMethod.OPTIONS).permitAll()
//                .antMatchers(URLConstant.OPEN_URL_PREFIX).permitAll()
                .anyRequest().authenticated()
                .and()
                .oauth2Login(oauth2 -> oauth2
                        .authorizationEndpoint(authorization -> {
                                    authorization
                                            .authorizationRequestResolver(
                                                    authorizationRequestResolver(this.clientRegistrationRepository)
                                            );
                                }
                        ).successHandler(loginSuccessHandler)
                )
//                .oauth2Login()
//                .successHandler(loginSuccessHandler)
//                .and().logout().logoutUrl(URLConstant.LOGOUT_URL).logoutSuccessHandler(logoutSuccessHandler)
//                .and()
                .exceptionHandling()
                .authenticationEntryPoint(authenticationFailEntryPoint)
                .and().csrf().disable()
                .httpBasic().disable();
    }

#+END_SRC
* principle
* oauth
** config
#+BEGIN_SRC yaml
spring:
  security:
    oauth2:
      client:
        registration:
          github: # spring security预设的aouth provider，其他都被默认设置好了
            clientId: 3c5e748405a71fe5ad36
            clientSecret: 0bdc22fa41906e60486b07ba4c600f996c6e5c96
          gb-bsite: # 自定义的，需要指定类型和重定向
            client-id: survey
            client-secret: 8c6b1389-7585-40c3-adbd-ffe7bc054e26
            authorization-grant-type: authorization_code
            redirect-uri: http://api.questionnaire.dev.gobrand.top/login/oauth2/code/gb-bsite 
            # 认证完毕的回调，code会丢到该回调的后面，必须设置，用于设置上下文，真正的最终回调需要在.oauth2Login().defaultSuccessUrl(domain)设置

        provider:
          gb-bsite: # 自定义provider
            authorization-uri: http://localhost:8080/auth/realms/business-account/protocol/openid-connect/auth
            token-uri: http://localhost:8080/auth/realms/business-account/protocol/openid-connect/token
            user-info-uri: http://localhost:8080/auth/realms/business-account/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username

#+END_SRC
** resource server
对于使用spring oauth2(deprecated)外的认证产品，由于字段格式不符合spring security的抽取规则，直接本地数据库操作的原理是UserService返回UserDetail的时候把Authority写入属性
*** eg: keycloak
为了方便统一，可以从keycloak的Scope配置设置Mapper
[[file:~/Desktop/personal/study/img/keycloak_map_role.png][keycloak map role for spring security convenient]]
#+BEGIN_SRC java
// 如果更复杂，需要整个重写Converter，默认的只抽一个字段
    private JwtAuthenticationConverter jwtAuthenticationConverter() {
        // create a custom JWT converter to map the roles from the token as granted authorities
        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
        jwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(JWT_ROLE_NAME); // default is: scope, scp
        jwtGrantedAuthoritiesConverter.setAuthorityPrefix(ROLE_PREFIX ); // default is: SCOPE_

        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);
        return jwtAuthenticationConverter;
    }

#+END_SRC
即是oauth client，又是resource server，不是自己对自己resource server，上下文不可能同一个，AuthenticationToken只有一个，除非改了写入逻辑
https://stackoverflow.com/questions/58805033/using-spring-boot-2-oauth-client-and-resourceserver-in-the-same-context
*** spring gateway as oauth client
https://piotrminkowski.com/2020/10/09/spring-cloud-gateway-oauth2-with-keycloak/
#+BEGIN_SRC yaml
server:
  port: 9090
spring:
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: 3c5e748405a71fe5ad36
            clientSecret: 0bdc22fa41906e60486b07ba4c600f996c6e5c96
          gb-bsite:
            client-id: survey
            client-secret: 8c6b1389-7585-40c3-adbd-ffe7bc054e26
            authorization-grant-type: authorization_code
            redirect-uri: http://127.0.0.1:9090/login/oauth2/code/gb-bsite

        provider:
          gb-bsite:
            authorization-uri: http://bsite.auth.dev.gobrand.top/auth/realms/business-account/protocol/openid-connect/auth
            token-uri: http://bsite.auth.dev.gobrand.top/auth/realms/business-account/protocol/openid-connect/token
            user-info-uri: http://bsite.auth.dev.gobrand.top/auth/realms/business-account/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
  cloud:
    gateway:
      default-filters:
        - TokenRelay
      routes:
        - id: survey # 调研工具转发
          uri: http://127.0.0.1:56789
          predicates:
            - Path=/survey/**
          filters:
            - StripPrefix=1

#+END_SRC
** oauth client拿access token
SpringUtil.getBean(OAuth2AuthorizedClientService.class).loadAuthorizedClient("gb-bsite","15815817741")
*** 注入jwt，redirect
#+BEGIN_SRC java
@RequiredArgsConstructor
@Slf4j
@Component
public class AuthenticationSuccessHandlerImpl implements AuthenticationSuccessHandler {
    private final ObjectMapper objectMapper;

    private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();

    private static final String JWT_ROLE_NAME = "roles";
    private static final String ROLE_PREFIX = "ROLE_";

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException {


        OAuth2AuthenticationToken oldAuth = (OAuth2AuthenticationToken) SecurityContextHolder.getContext().getAuthentication();
        ArrayList<GrantedAuthority> grantedAuthorities = new ArrayList<>(oldAuth.getAuthorities());

        // extract authority
        OAuth2AuthorizedClient oAuth2AuthorizedClient = SpringUtil.getBean(OAuth2AuthorizedClientService.class).loadAuthorizedClient("gb-bsite", "15815817741");
        Jwt jwt = SpringUtil.getBean(JwtDecoder.class).decode(oAuth2AuthorizedClient.getAccessToken().getTokenValue());
        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
        jwtGrantedAuthoritiesConverter.setAuthoritiesClaimName(JWT_ROLE_NAME); // default is: scope, scp
        jwtGrantedAuthoritiesConverter.setAuthorityPrefix(ROLE_PREFIX ); // default is: SCOPE_
        Collection<GrantedAuthority> convert = jwtGrantedAuthoritiesConverter.convert(jwt);
        grantedAuthorities.addAll(convert);


        OAuth2AuthenticationToken newAuth = new OAuth2AuthenticationToken(oldAuth.getPrincipal(), grantedAuthorities, oldAuth.getAuthorizedClientRegistrationId());
        SecurityContextHolder.getContext().setAuthentication(newAuth);

        handle(request, response);

        clearAuthenticationAttributes(request);

    }

    protected void clearAuthenticationAttributes(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            return;
        }
        session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
    }

    protected void handle(
            HttpServletRequest request,
            HttpServletResponse response
    ) throws IOException {

//        String targetUrl = determineTargetUrl(authentication);
        String targetUrl = "http://localhost:56789/open/auth-info";

        if (response.isCommitted()) {
            log.debug(
                    "Response has already been committed. Unable to redirect to "
                            + targetUrl);
            return;
        }

        redirectStrategy.sendRedirect(request, response, targetUrl);
    }

}

#+END_SRC
* ref
即是服务器又当资源服务器，多段配置
https://stackoverflow.com/questions/44970848/spring-security-jwt-token-for-api-and-session-for-web