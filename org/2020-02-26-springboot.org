#+TITLE:springboot
#+STARTUP: indent
* 获取resources目录下的template目录的位置
#+BEGIN_SRC java
String path = Thread.currentThread().getContextClassLoader().getResource("").getPath()+"template";
#+END_SRC
* multi-env
** 配置文件
application-dev之类
** 命令
 java -jar  xx.jar --spring.profiles.active=prod
* thin jar
目前没方案，除非完全手动配置，无法动态加载
https://stackoverflow.com/questions/48850628/forcing-including-lib-from-local-repo-into-jar-with-spring-thin-layout
https://github.com/spring-projects/spring-boot/issues/13772
https://www.baeldung.com/spring-boot-thin-jar
* general
java -jar xx.jar --server.port=8080
* exclue config
@Configuration
@EnableAutoConfiguration(exclude = {
        DiskSpaceHealthIndicatorAutoConfiguration.class,
        EurekaClientAutoConfiguration.class,
        FeignAutoConfiguration.class,
        GsonAutoConfiguration.class,
        HealthEndpointAutoConfiguration.class,
        ArchaiusAutoConfiguration.class,
        AuditEventsEndpointAutoConfiguration.class,
        AuditAutoConfiguration.class,
        BusRefreshAutoConfiguration.class,
        DataSourceHealthIndicatorAutoConfiguration.class,
        FeignRibbonClientAutoConfiguration.class,
        EurekaDiscoveryClientConfiguration.class,
        HystrixAutoConfiguration.class,
        KafkaMetricsAutoConfiguration.class,
        LoadBalancerAutoConfiguration.class,
        RibbonAutoConfiguration.class,
        SamplerAutoConfiguration.class,
        SleuthAnnotationAutoConfiguration.class,
        SystemMetricsAutoConfiguration.class,
        ValidationAutoConfiguration.class,
})
@ComponentScan(basePackages = "com.regent.rbp.**.**",
        excludeFilters = {
        @ComponentScan.Filter(type = FilterType.REGEX, pattern = {
                "com.regent.rbp.bill.*",
//                "com.regent.rbp.information.*",
                "com.regent.rbp.promotioncenter.*",
                "com.regent.rbp.system.*",
                "com.regent.rbp.finance.*",
                "com.regent.rbp.common.*(?<!DbServiceImpl)(?<!UserCache)(?<!SystemCommonServiceImpl)$",
                "com.regent.rbp.member.*",
                "com.regent.rbp.activiti.*",
                "com.regent.rbp.demo.*",
                "com.regent.rbp.report.*",
                "com.regent.rbp.file.*",
                "com.regent.rbp.job.*",
                "com.regent.rbp.task.*"
        }),
}

)
public class ExcludeConfig {
}
* beanname冲突
1. 改名(类名/component name)
2. 排除依赖图中对于重名部分依赖的类


不能通过BeanNameGenerator来处理冲突，冲突是在Beandefinition级别产生的
* trick
** speed
https://www.baeldung.com/spring-boot-startup-speed
根据具体的业务系统排除非常用组件，如metric，config，初始化加载等
springboot从2.2开始，可以设置后进行懒加载
@Profile("speedDev")
@Component
public class LazyProcessor implements BeanFactoryPostProcessor {

    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        Iterator<String> beanNames = beanFactory.getBeanNamesIterator();
        beanNames.forEachRemaining(beanName -> {
            try {
                BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);
                int role = beanDefinition.getRole();
                if (role == ROLE_APPLICATION) {
                    beanDefinition.setLazyInit(true);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        });
        beanFactory.getBeanDefinition("applicationContextUtil").setLazyInit(false); // 处理部分和系统绑定不能懒加载的组件，或必选组件
    }
}
