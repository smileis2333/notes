#+TITLE:  MySQL
#+STARTUP: indent
* structure
** page
*** page directory
**** slot
*** user records
** B+ tree
** 查询缓存
query_cache_type的值可以设置为：ON、OFF、DEMAND，分别表示已启用、已禁用、按需缓存，设置在my.cnf中即可。

have_query_cache的值为yes，表示当前数据库支持缓存功能

query_cache_limit 表示单条查询缓存的最大值，如果查询结果超过此值的大小，即使指定缓存当前结果，结果也不会被缓存，默认值为1M。

query_cache_min_res_unit表示缓存存储于内存的最小单元，默认为4k，也就是说，即使查询结果只有1k，也会占用4k内存，所以，如果此值设置的过大，会造成内存空间的浪费，如果此值设置的过小，则会频繁的分配内存单元或者频繁的回收内存单元。

query_cache_size 表示查询缓存的总大小，也就是说，内存中用于查询缓存的空间大小，如果其值为0，即使开启了查询缓存，也无法缓存，上图中，即为这种情况。

query_cache_wlock_invalidate 表示查询语句所查询的表如果被写锁锁定，是否仍然使用缓存返回结果。什么意思呢？我们来描述一个场景，因为写锁是独占的，是排他的，所以当写锁施加在对应表上的期间，如果对当前表发起查询请求，那么查询操作则需要等到写锁释放后才能进行，这是因为写锁是独占的，可是，如果对应的查询语句正好命中了这张表的缓存呢？查询请求是否就不用继续等待写锁释放而是直接从缓存中获取结果呢？此值就是用于应对这种情况的，默认值为OFF，也就是说，当此值为OFF时，即使表被施加了写锁，查询语句如果命中了对应的缓存，则会从缓存中得到结果，注意，设置为OFF表示可以从缓存返回结果，因为此值的含义为"查询缓存遭遇写锁时是否失效"，设置为OFF表示"不失效"，设置为ON表示"失效"，换句话说，如果此值设置为ON，如果表被施加了写锁，那么当写锁释放时，数据可能发生了改变，所以在表被施加写锁期间，即使此时有查询语句命中了查询缓存，也不能从缓存获取结果。那么我们可以得出结论，此值设置为OFF时，性能更好，并发能力更好，此值设置为ON时，更加安全，保证了数据的一致性。

-- 不一致的sql语句，mysql收到查询请求时，会对查询语句进行hash计算，计算出其对应的hash值，通过这个hash值查找是否存在对应的缓存，所以，即使查询语句的大小写不同，也会被认为是不同的查询语句，如果当前hash码没有命中对应的缓存，mysql则会将对应的hash值存放在对应的hash表中，同时将查询结果存放在对应的缓存中，如果查询语句的hash值命中了对应缓存项，则直接从缓存中返回响应的查询结果，如果缓存对应的表中的数据发生了变化，那么查询缓存中，所有与变化的数据表有关的缓存都将失效，失效缓存对应的内存空间将被释放
select * from test1;
SELECT * FROM TEST1;

我们可以在开启缓存的时候（query_cache_type=ON），指定对应的查询语句不使用缓存，示例如下:

-- 缓存黑名单
select sql_no_cache name from stu;

-- 缓存白名单(推荐)
select sql_cache name from stu;
** engin
可以具体到每张表的存储引擎不同，所以也称为表类型，常用的有innodb与myisam
*** innodb
支持表级锁，行级锁，支持事务，支持外检，不支持全文索引，表空间文件相对较大。
*** myisam
支持表级锁，不支持行级锁，不支持事务，不支持外键约束，支持全文索引，表空间文件相对小。
*** CSV
将CSV文件（以逗号分隔字段的文本文件）作为MySQL表文件
*** MRG_MYISAM
此引擎也被称为MERGE存储引擎，如果一些myisam表的表结构完全相同，可以将这些MyISAM表合并成的一张MRG_MYISAM虚拟表
*** BLACKHOLE
类似于/dev/null，不真正存储数据
*** MEMORY
内存存储引擎，速度快，但是一旦断电数据将会丢失，支持hash索引，支持表级锁，常用于临时表
*** PERFORMANCE_SCHEMA
从mysql5.5之后，多出了PERFORMANCE_SCHEMA数据库，PERFORMANCE_SCHEMA数据库中的表的表类型均为PERFORMANCE_SCHEMA，此数据库用于存储与数据库的性能相关的信息，用户无法创建使用这种存储引擎的表，但是dba可以通过PERFORMANCE_SCHEMA数据库中的信息进行性能分析，PERFORMANCE_SCHEMA数据库服务启动后此库中将不断的收集数据，mysql停机后此库中的表将不存在数据，类似于linux中的/proc
*** FEDERATED
用于访问其它远程MySQL服务器上表的存储引擎接口
*** ARCHIVE
见名知义，创建此种表类型的表往往用于存储归档信息、安全审计信息、历史信息等，创建数据仓库时，可能会用到此种表类型，使用archive表类型的表只支持select和insert操作，不能更新和删除操作，支持行级锁
*** FEDERATED
利用federated引擎可将本地数据表映射至远程 MySQL 数据表，从而就可以解决应用程序中繁多的跨机器连接数据库问题，其实federated相当于一个访问其他远程mysql server的代理接口，它通过创建一个到远程mysql server的客户端连接，通过FEDERATED引擎创建的表只是在本地有表定义文件，数据文件则存在于远程数据库中
-- 设置存储引擎
create table test11(id int,name varchar(10)) engine=innodb;

-- 改引擎，一般情况等于作死
alter table test11 engine=myisam;
** log manage
*** 错误日志
- mysql执行过程中的错误信息
- mysql执行过程中的警告信息、
- event scheduler运行时所产生的信息
- mysql启动和停止过程中的输出信息，未必是错误信息
- 主从复制结构中，从服务器IO复制线程的启动信息

log_warnings控制记录级别
- log_warnings用于标识警告信息是否一并记录到错误日志中。
- log_warnings的值为0，表示不记录警告信息。
- log_warnings的值为1，表示警告信息一并记录到错误日志中。
- log_warnings的值大于1，表示"失败的连接"的信息和创建新连接时"拒绝访问"类的错误信息也会被记录到错误日志中。

my.cnf-->log_warnings=2
*** 查询日志
记录SQL语句操作
general_log:表示查询日志是否开启，ON表示开启，OFF表示未开启，默认为OFF

log_output:表示当查询日志开启以后，以哪种方式存放，log_output可以设置为4种值，"FILE"、"TABLE"、"FILE,TABLE"、"NONE"。此值为"FILE"表示存放于指定的文件中，此值为"TABLE"表示存放于mysql库的general_log表中，此值为"FILE,TABLE"表示将查询日志同时存放于指定的文件与general_log表中，一般不会进行这样的设置，因为这样会徒增很多IO压力，如果开启，建议设置为"table",此值为"NONE"时表示不记录查询日志，即使general_log设置为ON，如果log_output设置为NONE，也不会记录查询日志，其实，log_output不止用户控制查询日志的输出，慢查询日志的输出也是由此参数进行控制，也就是说，log_output设置为file，就表示查询日志和慢查询日志都存放到对应的文件中，设置为table，查询日志和慢查询日志就都存放在对应的数据库表中。

general_log_file： 表示当log_output的值设置为"FILE"或者"FILE,TABLE"时，将查询日志存放于哪个日志文件中，换句话说，就是通过此参数指定查询日志的文件，默认情况下，此文件名于主机名相同，而且使用了相对路径，默认位置为datadir变量所对应的目录位置，一般为/var/lib/mysql目录下

docker exec mysql-dev tail -n 0 -f /var/lib/mysql/51ba6e3e8d58.log
*** 慢查询日志
mysqldumpslow用于分析文件的慢查询记录，如果存储为表，则无法使用

mysqldumpslow -s
c: 执行计数
l: 锁定时间
r: 返回记录
t: 执行时间
al:平均锁定时间
ar:平均返回记录数

at:平均执行时间
对于过慢的SQL执行，记录到慢查询日志中
*** 二进制日志
**** 概念
记录导致数据变更的sql语句/数据变更记录(语句与逐条数据的查别)，用于在全量备份的情况下，倒放该记录文件恢复特定时间点的文件
***** statement模式
只记录语句，但是某些情况下不一定生效，如使用了内置的函数，但是函数本身依存于当前的数据情况
***** row模式
记录对数据库做出修改的语句所影响到的数据行以及这些行的修改，比如，update A set test='test'，如果使用row模式，那么这条update语句所影响到的行所对应的修改，将会记录到binlog中，比如，A表中有1000条数据，那么当执行这条update语句以后，由于1000条数据都会被修改，所以会有1000行数据被记录到二进制日志中，以及它们是怎样被修改的，使用row模式时，优点是能够完全的还原或者复制日志被记录时的操作，缺点是记录日志量较大，IO压力大，性能消耗较大。
***** mixed模式
混合使用上述两种模式，一般的语句使用statment方式进行保存，如果遇到一些特殊的函数，则使用row模式进行记录，这种记录方式被称之为mixed，看上去这种方式似乎比较美好，但是在生产环境中，为了保险起见，一般会使用row模式。
**** 相关参数
- log_bin
- sql_log_bin 当前session的sql操作是否记录
- binlog_format 此变量的值可以设置为statement、row、mixed
- max_binlog_size 设置单个二进制日志文件的最大大小，以字节为单位，超过此值大小，则二进制日志文件会自动滚动，比如设置为500M为524288000
- sync_binlog 是否每次提交都从内存把操作刷出到文件，可能会浪费性能

查看二进制日志文件列表
show master logs;
show binary logs;

查看当前正在使用的二进制日志文件
show master status;

查看二进制日志文件中的事件（查看binlog内容），可以使用如下语句，如果不明白如下语句的含义，可以对照上文中的示例查看，此处只用于总结。

show binlog events
show binlog events in 'mybinlog.000001'
show binlog events in 'mybinlog.000001'from 245
show binlog events in 'mybinlog.000001'limit 3
show binlog events in 'mybinlog.000001'limit 2,5
show binlog events in 'mybinlog.000001'from 245 limit 10
show binlog events in 'mybinlog.000001'from 245 limit 4,20

mysqlbinlog命令
我们也可以使用如下命令从指定位置开始查看二进制日志。
mysqlbinlog --start-position 415 mybinlog.000001

或者指定，从哪个位置开始，到那个位置结束，查看这之间的二进制日志文件。
mysqlbinlog --start-position 317 --stop-position 442 mybinlog.000001

还可以从指定的时间开始查看，比如，查看2017年3月4日10点40以后的日志。
mysqlbinlog --start-datetime "2017-3-4 10:40:00" mybinlog.000001;

当然，也可以指定结束时间，比如
mysqlbinlog --start-datetime "2017-3-4 10:40:00" --stop-datetime "2017-3-4 10:55:00" mybinlog.000001;
*** 中继日志
*** innodb存储引擎级别的事务日志
* backup
** 概念
*** 全量备份
*** 差异备份
*** 增量备份
*** 时间点恢复
*** 热备
热备就是热备份，什么意思呢？就是在数据库正常运行的情况下进行备份，也就是说，在热备期间，数据库的读写操作均可正常进行，所以，热备份不能只依靠简单的拷贝命令，而是需要专门的备份工具，而且技术复杂程度较高，mysql中的myisam存储引擎不支持热备，InnoDB存储引擎支持热备。可以借助诸如lvm，zfs进行热备
*** 温备
温备是什么意思呢？温备比热备稍弱一点，如果使用温备的方式对数据库进行备份，在温备期间，数据库只能进行读操作，不能进行写操作，即数据库在可读但不可写的状态下进行备份。
*** 冷备
懂了热备与温备，冷备就好理解了，在冷备期间，数据库的读写操作均不可进行，即读写操作均不可进行的状态下所做的备份被称为冷备。冷备虽然会影响数据库的运行，但是备份出的数据的可靠性是最高的，冷备的备份过程往往是最简单的，mysql中，可能会通过复制结构去做冷备。
*** 物理备份
物理备份就是直接备份数据库所对应的数据文件，以达到备份的目的，物理备份相对逻辑备份来说，性能更强。
*** 逻辑备份
逻辑备份就是将数据从数据库中导出，并且将导出的数据进行存档备份，这种备份方式被称作逻辑备份。
** 备份工具
*** mysqldump
mysqldump是mysql自带的备份工具，它是一种逻辑备份工具，也就是说，它会将数据从数据库中读出，转化为对应的sql语句。
mysqldump能够实现完全备份或部分备份。
使用innodb表类型的表能够使用mysqldump进行热备。
使用myisam表类型的表只能够使用mysqldump进行温备。
如果数据量较小，使用mysqldump是一种选择。

mysqldump的优点：
可以直接使用文本处理工具处理对应的备份数据，因为备份数据已经被mysqldump转换为了对应的insert语句，所以，我们可以借助文件系统中的文本处理工具对备份数据进行直接处理。
mysqldump的缺点：
当数据为浮点类型时，会出现精度丢失
mysqldump的备份过程属于逻辑备份，备份速度、恢复速度与物理备份工具相比较慢，而且mysqldump备份的过程是串行化的，不会并行的进行备份，如果想要并行备份，可以使用mydumper，但是此处我们不考虑这些，只考虑mysqldump，当数据量较大时，一般不会使用mysqldump进行备份，因为效率较低。
mysqldump对innodb存储引擎支持热备，innodb支持事务，我们可以基于事务通过mysqldump对数据库进行热备。
mysqldump对myisam存储引擎只支持温备，通过mysqldump对使用myisam存储引擎的表进行备份时，最多只能实现温备，因为在备份时会对备份的表请求锁，当备份完成后，锁会被释放。

-- 整个库表备份，不带创建库的SQL语句
mysqldump -uroot -h 192.168.1.146 zsythink -p

-- 只备份表t1,t2,t3
mysqldump -uroot -h192.168.1.146 zsythink t1 t2 t3 -p

-- 备份带创建库的SQL语句
mysqldump -uroot -h192.168.1.146 --databases zsythink t1 t2 t3 -p

-- 全部库
mysqldump -uroot -h192.168.1.146 --all-databases zsythink t1 t2 t3 -p

-- 只复制表结构
mysqldump -uroot -h192.168.1.146 -d  zsythink t1 t2 t3 -p

*** xtrabackup
由Percona提供，Percona是一个NB的组织，Percona对mysql的研究很深入，xtrabackup就是Percona出品的数据库备份工具，而且是开源的免费的。
xtrabackup支持对Innodb存储引擎进行热备。
xtrabackup是一种物理备份工具，所以性能强悍。
xtrabackup支持完全备份，差异备份，增量备份，部分备份等功能。
*** 通过select语句进行部分备份
通过select语句将表中的数据导出到指定文件中，例如导出a表数据到/testdir/a.backup中，在使用select语句备份a表的同时，最好将a表的表结构也备份一份，因为还原的时候很有可能用到。
select * from a into outfile '/testdir/a.backup';
如果想要通过a.backup文件恢复a表的内容，可以创建一个新的表，然后使用load data将a.backup中的数据导入到新表中，示例如下。
create table b(id int);
load data infile "/testdir/a.backup" into table b;
*** cp命令或tar命令
利用上述命令，在linux中直接对数据文件进行备份，这种方式只适用于冷备的方式。
** 一致性读和快照读
在可重读的隔离级别下，可以进行热备
坑: start transaction，不会立刻创建快照，而是在第一条select语句执行时才创建，如果开始之后，对于select语句还没执行之前，原表发生变更，那么状态已经不一致
解决：START TRANSACTION WITH consistent snapshot -- 事务开始时，立刻创建快照
** 恢复
mysql > use [dbName]
mysql > source [file]
* vcs
** flyway
** mibatis migration
* procedure
DROP PROCEDURE IF EXISTS `gobrand-platform-questionnaire-dev`.presetuser;

DELIMITER $$
$$
CREATE DEFINER=`root1`@`localhost` PROCEDURE `gobrand-platform-questionnaire-dev`.`presetuser`()
begin
	select count(*) into @usernums from t_user;
	IF @usernums=0 THEN
    	select 'insert new user';
    	insert into `gobrand-platform-questionnaire-dev`.t_user(id,username,`password`) values(1,'15815817741','{bcrypt}$2a$10$/MYGd63eey3lk.Ae8BUgMu1b28WlULp.9WZeIRsZ/FKQMCxz7DJjC');
	END IF;
end$$
DELIMITER ;
call presetuser();
** loop query result
DECLARE CONTINUE HANDLER  FOR NOT FOUND SET finished = 1;

OPEN tables_columns_cursor;

check_table: loop
	FETCH tables_columns_cursor INTO column_item,table_item;
	IF finished = 1 then
		LEAVE check_table;
	END IF;
	set @check_invalid_column_str = concat("select count(*) into @column_count  from ",table_item," where length(",column_item,")>16");
	PREPARE check_invalid_column from @check_invalid_column_str;
	EXECUTE check_invalid_column;
	DEALLOCATE PREPARE check_invalid_column;
	if @column_count > 0 then
			insert into length_check(table_name,column_name,`count`,help_sql)values(table_item,column_item,@column_count,@check_invalid_column_str);
	end if;
END LOOP check_table;

CLOSE tables_columns_cursor;
* config
** cluster
*** docker
默认ip是192.168.0.x系列，如果网卡跟本地ip冲突的话，需要处理两点
- 网卡定义的net不要和本地已经使用的冲突
- 进行配置文件的改动(最好从镜像里面拷贝出来改动，不然可能出现问题，如CLRF,如win10通过xftp传过去的时候导致解析失败，/etc下的mysql-cluster.cnf和my.cnf，用docker cp)


docker network create cluster --subnet=192.168.4.0/24

# 管理节点
docker run -d --net=cluster --name=management1 --ip=192.168.4.2 -v ~/mysql-cluster.cnf:/etc/mysql-cluster.cnf -v ~/my.cnf:/etc/my.cnf mysql/mysql-cluster ndb_mgmd
# 两个数据节点
docker run -d --net=cluster --name=ndb1 --ip=192.168.4.3 -v ~/mysql-cluster.cnf:/etc/mysql-cluster.cnf -v ~/my.cnf:/etc/my.cnf mysql/mysql-cluster ndbd
docker run -d --net=cluster --name=ndb2 --ip=192.168.4.4 -v ~/mysql-cluster.cnf:/etc/mysql-cluster.cnf -v ~/my.cnf:/etc/my.cnf mysql/mysql-cluster ndbd
# 两个mysql节点
docker run -d --net=cluster --name=mysql1 --ip=192.168.4.10 -v ~/mysql-cluster.cnf:/etc/mysql-cluster.cnf -v ~/my.cnf:/etc/my.cnf -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql/mysql-cluster mysqld
docker run -d --net=cluster --name=mysql2 --ip=192.168.4.11 -v ~/mysql-cluster.cnf:/etc/mysql-cluster.cnf -v ~/my.cnf:/etc/my.cnf -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql/mysql-cluster mysqld


# 改密码
docker logs mysql1 2>&1 | grep PASSWORD
docker exec -it mysql1 mysql -uroot -p
ALTER USER 'root'@'localhost' IDENTIFIED BY '123';

**** cli tool
# 检测启动状况
docker run -it --rm -v ~/mysql-cluster.cnf:/etc/mysql-cluster.cnf -v ~/my.cnf:/etc/my.cnf --net=cluster mysql/mysql-cluster ndb_mgm
** master/slave
# mysql-master.cnf
[mysqld]
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
datadir         = /var/lib/mysql
secure-file-priv= NULL

# Custom config should go here
!includedir /etc/mysql/conf.d/

server_id=1
binlog_format=ROW
gtid_mode=ON
enforce-gtid-consistency=true

# mysql-slave-1.cnf
[mysqld]
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
datadir         = /var/lib/mysql
secure-file-priv= NULL

# Custom config should go here
!includedir /etc/mysql/conf.d/

server_id=2
binlog_format=ROW
gtid_mode=ON
enforce-gtid-consistency=true
read_only=ON

docker run -d --name mysql-master \
  -e MYSQL_USER=my_user \
  -e MYSQL_DATABASE=testmasterslave \
  -e MYSQL_PASSWORD=my_database_password \
  -e MYSQL_ROOT_PASSWORD=123 \
  -p 3307:3306 \
  -v ~/mysql-master.cnf:/etc/mysql/my.cnf \
  mysql:8.0 \
  --log-bin=my

docker exec -it mysql-master mysql -u root -p
show variables like '%gtid%';
CREATE USER 'repl'@'%' IDENTIFIED BY 'password';
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';


docker run -d --name mysql-slave-1 \
  -e MYSQL_ROOT_PASSWORD=123 \
  -p 3308:3306 \
  -v ~/mysql-slave-1.cnf:/etc/mysql/my.cnf \
  mysql:8.0 \
  --skip-log-bin \
  --skip-log-slave-updates \
  --skip-slave-start


docker exec -it mysql-slave-1 mysql -u root -p
CHANGE MASTER TO 
  MASTER_HOST='192.168.0.4',
  MASTER_PORT=3307,
  MASTER_USER='repl',
  MASTER_PASSWORD='password',
  GET_MASTER_PUBLIC_KEY=1,
  MASTER_AUTO_POSITION=1;
START SLAVE;

* script
** general
mysql -uroot -pyaXxCg86Kx -h 192.168.51.39 -P 3306

#+BEGIN_SRC sql
show full processlist;
show  VARIABLES like '%timeout%';

select concat('kill ',ID,';') from information_schema.processlist where db  = 'rbp';

-- 生成行数用于抽取位置
SELECT
	@rownum := @rownum + 1 row_num,
	t.id
FROM
	(
	SELECT
		@rownum := 0) r,
	(SELECT * from t_questionnaire_info where status = 'INVALID') t

#+END_SRC
** log
#+BEGIN_SRC sql
-- bin log
show binary logs; -- 查看当天总数(rotate)
show variables like 'log_bin'; -- 查看是否开启
show variables like '%datadir%'; --  查看binlog位置

-- query log
SET global general_log = 1;
SHOW VARIABLES LIKE '%general%';
#+END_SRC
** system admin
ALTER USER 'root'@'localhost' IDENTIFIED BY 'yaXxCg86Kx';

** remote connect
*** mysql8
CREATE USER 'root'@'%' IDENTIFIED BY 'yaXxCg86Kx';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'  WITH GRANT OPTION;
FLUSH PRIVILEGES;

# comment
# bind-address                                  = 127.0.0.1
# in 50-distro-server.cnf
# then restart mysql server
# the client may be require to allowPublicKeyRetrieval=true(default is false)
** console
*** Start Service
**** 包管理器安装
***** redhat系(npm)
service mysqld start
service mysqld stop
**** 直接装
- 启动
/usr/bin/mysqld_safe &
- 关闭
以下命令是root用户还不存在密码的情况下
mysqladmin -uroot shutdown
如果root用户已经设置了密码
mysqladmin -uroot shutdown -p
*** Connect Server
mysql -u root -p (打开buffer，接收密码(非回显))
mysql -u root -p123 (root是账户，123就是密码)
mysql -u root -D test -p123 (-D指定指定数据库)
mysql -u root -p -S /var/lib/mysql.sock (-S指定套接字文件)
mysql -u root -p -h 192.168.1.103 -P 3306 (-h指定host,-P指定服务端口)
mysql -u root -p123 -e 'use mysql; select user,host,password from user;'
mysql -uroot -p123123 -e 'create database if not exists testdb;show databases;'
连接数据库的常用选项
--host=host_name, -h host_name：服务端地址；
--user=user_name, -u user_name：用户名；
--port=port_num, -P port_num：服务端端口；
--socket=path, -S path
--database=db_name, -D db_name：
--compress, -C：数据压缩传输
--execute=statement, -e statement：非交互模式执行SQL语句；
--vertical, -E：查询结果纵向显示；
--protocol={TCP|SOCKET|PIPE|MEMORY}：
*** Help
help获取帮助信息
help content 获取分类的信息
help command(command代表具体指令，如create)
* 注意事项
** ID
InnoDB对于最大主键的记录是不做处理的，如果产生空洞了，默认主键从空洞处开始算
MyISAM则是会记录当前最大的主键
** enable cache
$r=mysql_query(xxx);
** intersect and except
mysql没有提供支持，需要使用in/not in自己处理
* ref
#  cluster
https://www.cnblogs.com/byxxw/p/11433571.html  配置有误，需要my.cnf改动为包含conf.d,否则无法生效
https://hub.docker.com/r/mysql/mysql-cluster/

# master/slave
https://chanjarster.github.io/post/mysql-master-slave-docker-example/


# export file
https://www.cnblogs.com/yuwensong/p/3955834.html

# about index
https://stackoverflow.com/questions/4691799/why-does-mysql-not-use-an-index-for-a-greater-than-comparison/4691996

# 参数内存计算器
http://www.mysqlcalculator.com/
* debug
-- 8.0
-- row lock check
SELECT * from performance_schema.data_locks;
