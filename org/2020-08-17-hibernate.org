#+TITLE:  hibernate
#+STARTUP: indent
* config
persistence.xml只能设置标准属性和部分实现的属性，如果需要用到特定实例的属性设置，需要设置原生的配置文件
EntityManagerFactory emf = Persistence.createEntityManagerFactory("HelloWorldPU"); //load META-INF/persistence.xml, use the name of persistence-unit to open
* exclusive
** SessionFactory
EntityManagerFactory <==> org.hibernate.SessionFactory
SessionFactory sessionFactory = new MetadataSources(
    new StandardServiceRegistryBuilder()
        .configure("hibernate.cfg.xml").build()
).buildMetadata().buildSessionFactory();
*** ServiceRegistry
**** programmatic
serviceRegistryBuilder
    .applySetting("hibernate.connection.datasource", "myDS")
    .applySetting("hibernate.format_sql", "true")
serviceRegistryBuilder.applySetting(
    Environment.TRANSACTION_COORDINATOR_STRATEGY,
    JtaTransactionCoordinatorBuilderImpl.class
);
ServiceRegistry serviceRegistry = serviceRegistryBuilder.build();
**** loadProperties
*** MetadataSources
telling Hibernate which persistent classes are part of your mapping metadata
MetadataSources metadataSources = new MetadataSources(serviceRegistry);
metadataSources.addAnnotatedClass(
    org.jpwh.model.helloworld.Message.class
);
MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder();

Metadata metadata = metadataBuilder.build();
*** hibernate==>EntityManager-Factory 
the org.hibernate.jpa.internal.EntityManagerFactoryImpl has a constructor that accepts a SessionFactory.
* relation control
** method bind
优先选项
#+BEGIN_SRC java
public void addBid(Bid bid){
// pre check
  anItem.getBids().add(aBid);
  aBid.setItem(anItem);
}
#+END_SRC
** constructor bind
将单一依赖通过构造器注入，初始化时设置两者的联系
#+BEGIN_SRC java
public Bid(Item item){
  this.item = item;
  item.getBids().add(this);
}
#+END_SRC
* Domain model metadata
** annotation
*** @Entity
*** @NamedQuery
定义原生语句
hibernate可以丢在packafe-info.java
JPA自带的不行
#+BEGIN_SRC java
@NamedQueries({
    @NamedQuery(
        name = "findItemById",
        query = "select i from Item i where i.id = :id"
    )
    ,
    @NamedQuery(
        name = "findItemByName",
        query = "select i from Item i where i.name like :name",
        hints = {
            @QueryHint(
                name = org.hibernate.annotations.QueryHints.TIMEOUT_JPA,
                value = "60000"),
            @QueryHint(
                name = org.hibernate.annotations.QueryHints.COMMENT,
                value = "Custom SQL comment")
        }
    )
})
#+END_SRC
*** @Id
*** @GeneratedValue
TABLE：使用一个特定的数据库表格来保存主键。
SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。
IDENTITY：主键由数据库自动生成（主要是自动增长型）
AUTO：主键由程序控制。
*** @Table
@Table(name = "`USERS`") //hibernate可以用``转义
@Table(name = "\"USERS\"") //JPA使用"转义
** xml configure
*** JPA mapping file
persistence.xml默认加载同路径下的orm.xml(可改名)
#+BEGIN_SRC xml

<persistence-unit name="SimpleXMLCompletePU">
<!--persistence.xml....custom mapping file name-->
    <mapping-file>simple/Mappings.xml</mapping-file>
</persistence-unit>
#+END_SRC
#+BEGIN_SRC xml
<entity-mappings
        version="2.1"
        xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
            http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <!-- First, global metadata -->
    <persistence-unit-metadata>

        <!-- Ignore all annotations, all mapping metadata in XML files -->
        <xml-mapping-metadata-complete/>

        <!-- Some default settings -->
        <persistence-unit-defaults>
            <!--
                Escape all SQL column/table/etc. names, e.g. if your SQL
                names are actually keywords (a "USER" table for example)
              -->
            <delimited-identifiers/>
        </persistence-unit-defaults>

    </persistence-unit-metadata>

    <entity class="org.jpwh.model.simple.Item" access="FIELD">
        <attributes>
            <id name="id">
                <generated-value strategy="AUTO"/>
            </id>
            <basic name="name"/>
            <basic name="auctionEnd">
                <temporal>TIMESTAMP</temporal>
            </basic>
            <transient name="bids"/>
            <transient name="category"/>
        </attributes>
    </entity>

</entity-mappings>
#+END_SRC
*** hibernate mapping file
1. suffix.hbm.xml，旧式的配置实体类方式，一般已不再使用该种类型进行实体类配置(采用JPA注解为主流)
2. 文件可以放置多种元素，目前多用于本地SQL配置，以及hibernate专属功能的配置启用，或组件使用
#+BEGIN_SRC xml
<?xml version="1.0"?>
<!-- 
  Metadata is declared inside a <code>&lt;hibernate-mapping&gt;</code> root element. Attributes such as
  <code>package</code> name and <code>default-access</code> apply to all mappings in this file. You may include as many
  entity class mappings as you like.
  -->
<hibernate-mapping
        xmlns="http://www.hibernate.org/xsd/orm/hbm"
        package="org.jpwh.model.simple"
        default-access="field">

    <!-- An entity class mapping ,可以配多个，但是约定基本都是一个实体类配一个 -->
    <class name="Item">
        <id name="id">
            <generator class="native"/>
        </id>
        <property name="name"/>
        <property name="auctionEnd" type="timestamp"/>
    </class>

    <!-- Externalized queries -->
    <query name="findItemsHibernate">select i from Item i</query>

    <!-- Auxiliary schema DDL -->
    <database-object>
        <create>create index ITEM_NAME_IDX on ITEM(NAME)</create>
        <drop>drop index if exists ITEM_NAME_IDX</drop>
    </database-object>
</hibernate-mapping>
#+END_SRC
** vendor extension
*** hibernate
@org.hibernate.annotations.Cache(
    usage = org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE
)
* Bean Validation
hibernate exclusive
** annotation
@NotNull
@Size
@Future
* Accessing metadata at runtime
** The dynamic Metamodel API in Java Persistence
#+BEGIN_SRC java
@Test
    public void accessDynamicMetamodel() throws Exception {
        EntityManagerFactory entityManagerFactory = JPA.getEntityManagerFactory();

        Metamodel mm = entityManagerFactory.getMetamodel();

        Set<ManagedType<?>> managedTypes = mm.getManagedTypes();
        assertEquals(managedTypes.size(), 1);

        ManagedType itemType = managedTypes.iterator().next();
        assertEquals(
            itemType.getPersistenceType(),
            Type.PersistenceType.ENTITY
        );

        SingularAttribute nameAttribute =
            itemType.getSingularAttribute("name");
        assertEquals(
            nameAttribute.getJavaType(),
            String.class
        );
        assertEquals(
            nameAttribute.getPersistentAttributeType(),
            Attribute.PersistentAttributeType.BASIC
        );
        assertFalse(
            nameAttribute.isOptional() // NOT NULL
        );

        SingularAttribute auctionEndAttribute =
            itemType.getSingularAttribute("auctionEnd");
        assertEquals(
            auctionEndAttribute.getJavaType(),
            Date.class
        );
        assertFalse(
            auctionEndAttribute.isCollection()
        );
        assertFalse(
            auctionEndAttribute.isAssociation()
        );
    }
#+END_SRC
** static metamodel
#+BEGIN_SRC java
    @Test
    public void accessStaticMetamodel() throws Exception {

        SingularAttribute nameAttribute = Item_.name;

        assertEquals(
            nameAttribute.getJavaType(),
            String.class
        );
    }
#+END_SRC
* choose type
区分entity/value type的关键，在于先将其视为value type，之后再观察是否符合，不符合则进行类型提升
** entity type
对于表的实体映射，带主键，生命周期独立(指的是持久型)。Shared references
** value type
对于表设计在Java中的二层抽象，无主键，生命周期依赖于外层的实体对象，典型的比如表字段中的三种地址，可以在Java中抽象为Address进行汇总t表示
* option
** prefix
#+BEGIN_SRC java
public class CENamingStrategy extends
    org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl {
    @Override
    public Identifier toPhysicalTableName(Identifier name,
                                          JdbcEnvironment context) {
        return new Identifier("CE_" + name.getText(), name.isQuoted());
    }
}
#+END_SRC
#+BEGIN_SRC xml
<persistence-unit>name="CaveatEmptorPU">
    ...

    <properties>
        <property name="hibernate.physical_naming_strategy"
                  value="org.jpwh.shared.CENamingStrategy"/>
    </properties>
</persistence-unit>
#+END_SRC
** Dynamic SQL generation
插入和更新如果设置自动生成statement，在实体类很多的情况下，会导致大量的语句进行了内存占用。或者字段很多的情况，会影响优化
@org.hibernate.annotations.DynamicInsert
@org.hibernate.annotations.DynamicUpdate
** application view
在没有DB权限时，进行内存的view建立
#+BEGIN_SRC java
@Entity
@org.hibernate.annotations.Immutable
@org.hibernate.annotations.Subselect(
    value = "select i.ID as ITEMID, i.ITEM_NAME as NAME, " +
            "count(b.ID) as NUMBEROFBIDS " +
            "from ITEM i left outer join BID b on i.ID = b.ITEM_ID " +
            "group by i.ID, i.ITEM_NAME"
)
#+END_SRC
** immutable 
@org.hibernate.annotations.Immutable
进行语义的不可变设定，hibernate会进行一系列的优化，比如不生成update语句，比如避免脏检查等
* map value type
** map basic properties
*** @javax.persistence.Transient
*** @Basic
optional=true allow NULL自动建表才产生作用，已建好的情况下，由hibernate对入参做检测，可能与DDL不一致
fetch set lazy loading
*** @Column(nullable = false)
*** access
@Access决定运行时的访问逻辑，可作用于field/entity
FIELD直接访问
PROPERTY通过getter/setter访问
<hibernate-mapping>
    <class name="Item">
        <id name="id">
           ...

        </id>
        <property name="validated"
                  column="VALIDATED"
                  access="noop"/> <!--不在存在于业务逻辑的废弃属性，但又必须根据该字段的进行筛选，会导致注解的处理全部失效，所以如果需要该特性，该配置文件需要对实体进性全部属性的配置-->
    </class>
</hibernate-mapping>
*** @org.hibernate.annotations.Formula
非表属性，典型的比如计算属性的得出(hibernate对其声明SQL进性子查询嵌入，在查询时一并得出计算结果)
@org.hibernate.annotations.Formula(
    "substr(DESCRIPTION, 1, 12) || '...'"
)
protected String shortDescription;
@org.hibernate.annotations.Formula(
    "(select avg(b.AMOUNT) from BID b where b.ITEM_ID = ID)"
)
protected BigDecimal averageBidAmount;
*** transform
@Column(name = "IMPERIALWEIGHT")
@org.hibernate.annotations.ColumnTransformer(
    read = "IMPERIALWEIGHT / 2.20462",
    write = "? * 2.20462"
)
protected double metricWeight;
List<Item> result =
    em.createQuery("select i from Item i where i.metricWeight = :w")
        .setParameter("w", 2.0)
        .getResultList();
转换得到
// ...
where
    i.IMPERIALWEIGHT / 2.20462=?
*** 数据库默认值
将默认值生成委派给hibernate，hibernate每次insert/update时，先select得到默认值(有可能可被缓存)，如果不设置，需要重新用户根据主键查一遍得到完整的数据(不查的情况，无法得知默认值生成情况)
@Temporal(TemporalType.TIMESTAMP)
@Column(insertable = false, updatable = false)
@org.hibernate.annotations.Generated(
    org.hibernate.annotations.GenerationTime.ALWAYS //每次insert/update自动刷新该属刑
)
protected Date lastModified;
<enter/>
@Column(insertable = false)
@org.hibernate.annotations.ColumnDefault("1.00")
@org.hibernate.annotations.Generated(
    org.hibernate.annotations.GenerationTime.INSERT //insert时才刷新
)
protected BigDecimal initialPrice;
@Temporal 对时间相关字段进性类型指定，第二种做法是使用convertor
@CreationTimestamp/@UpdateTimestamp与@Generated为同级注解
*** enumerations
@Enumerated //默认处理为声明顺序的存储，可以指定为EnumType.STRING直接写标签
** map embeddable value
没有独立的生命周期，依赖于其他对象决定自己的存活(实质为多个数据库字段聚合为一个抽象类，大部分声明与Entity类似)，使用@Embeddable
两快区域的字段进行了embeddable复用
*** override
如下，一个对象存在两个Address对象，因为字段的占位复用必须进行重设，否则还需要重新定义一个类似Address的冗余类
    @Embedded // Not necessary...
    @AttributeOverrides({
            @AttributeOverride(name = "street",
                    column = @Column(name = "BILLING_STREET")), // NULLable!
            @AttributeOverride(name = "zipcode",
                    column = @Column(name = "BILLING_ZIPCODE", length = 5)),
            @AttributeOverride(name = "city",
                    column = @Column(name = "BILLING_CITY"))
    })
    protected Address billingAddress;
支持无限嵌套
*** @Lob 指定byte[]转为BLOB类型，默认根据长度转成CHAR/VARCHAR
//导致延迟加载失效
@Lob
protected byte[] image;
@Lob
protected String description;

延迟加载，缺点是与JDBC绑定，难以进行单元测试
@Lob
    protected java.sql.Blob imageBlob;
    @Lob
    protected java.sql.Clob description;
//指定处理器
  @org.hibernate.annotations.Type(type = "yes_no")
    protected boolean verified = false;
*** custom convertor
缺陷，无法一值转数据库多列或者反向，同时，查询时也无法按内部字段查询，因为无法转换出SQL，价值取决于数据粒度以及应用场景
#+BEGIN_SRC java
@Converter(autoApply = true) // Default for MonetaryAmount properties
public class MonetaryAmountConverter
    implements AttributeConverter<MonetaryAmount, String> {

    @Override
    public String convertToDatabaseColumn(MonetaryAmount monetaryAmount) {
        return monetaryAmount.toString();
    }

    @Override
    public MonetaryAmount convertToEntityAttribute(String s) {
        return MonetaryAmount.fromString(s);
    }
}

@NotNull
@Convert( // Optional, autoApply is enabled
    converter = MonetaryAmountConverter.class,
    disableConversion = false)
@Column(name = "PRICE", length = 63)
protected MonetaryAmount buyNowPrice;

//指定特定字段采用转换器
@Convert(
    converter = ZipcodeConverter.class,
    attributeName = "zipcode" // Or "city.zipcode" for nested embeddables
)
protected Address homeAddress;

#+END_SRC
*** custom userType
多列合为一个对象，可以采用userType机制，自己处理ResultSet和Columns注解指定的多个cloumn映射逻辑
#+BEGIN_SRC java
 @NotNull
 @org.hibernate.annotations.Type(
     type = "monetary_amount_usd"
 )
 @org.hibernate.annotations.Columns(columns = {
     @Column(name = "BUYNOWPRICE_AMOUNT"),
     @Column(name = "BUYNOWPRICE_CURRENCY", length = 3)
 })
 protected MonetaryAmount buyNowPrice;

 @NotNull
 @org.hibernate.annotations.Type(
     type = "monetary_amount_eur"
 )
 @org.hibernate.annotations.Columns(columns = {
     @Column(name = "INITIALPRICE_AMOUNT"),
     @Column(name = "INITIALPRICE_CURRENCY", length = 3)
 })
 protected MonetaryAmount initialPrice;

//package-info.java
@org.hibernate.annotations.TypeDefs({
    @org.hibernate.annotations.TypeDef(
        name = "monetary_amount_usd",
        typeClass = MonetaryAmountUserType.class,
        parameters = {@Parameter(name = "convertTo", value = "USD")}
    ),
    @org.hibernate.annotations.TypeDef(
        name = "monetary_amount_eur",
        typeClass = MonetaryAmountUserType.class,
        parameters = {@Parameter(name = "convertTo", value = "EUR")}
    )
})

#+END_SRC
* Mapping inheritance
主要的影响是多态查询，即通过父类引用进行查询
** Table per concrete class with implicit polymorphism
每个实体一个表
父类声明公用字段，子类对数据库列名进行覆盖声明
#+BEGIN_SRC java
@MappedSuperclass
public abstract class BillingDetails {
    @NotNull
    protected String owner;
}

@Entity
@AttributeOverride(
        name = "owner",
        column = @Column(name = "CC_OWNER", nullable = false))
public class CreditCard extends BillingDetails {
    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;
    @NotNull
    protected String cardNumber;
    @NotNull
    protected String expMonth;
    @NotNull
    protected String expYear;
}
#+END_SRC
** Table per concrete class with unions
每个实体一个类，多态查询通过合成union合成
#+BEGIN_SRC java
@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class BillingDetails {
    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;
    @NotNull
    protected String owner;
}

@Entity
public class CreditCard extends BillingDetails {
    @NotNull
    protected String cardNumber;
    @NotNull
    protected String expMonth;
    @NotNull
    protected String expYear;
}
#+END_SRC
#+BEGIN_SRC sql
select
    ID, OWNER, EXPMONTH, EXPYEAR, CARDNUMBER,
    ACCOUNT, BANKNAME, SWIFT, CLAZZ_
 from
    ( select
          ID, OWNER, EXPMONTH, EXPYEAR, CARDNUMBER,
          null as ACCOUNT,
          null as BANKNAME,

          null as SWIFT,
          1 as CLAZZ_
      from
          CREDITCARD
      union all
      select
          id, OWNER,
          null as EXPMONTH,
          null as EXPYEAR,
          null as CARDNUMBER,
          ACCOUNT, BANKNAME, SWIFT,
          2 as CLAZZ_
      from
          BANKACCOUNT
    ) as BILLINGDETAILS
#+END_SRC
** Table per class hierarchy
多个实体字段聚合在一张表中，无法合理设置约束，一般没人用
** TABLE PER SUBCLASS WITH JOINS
抽象父类也作为数据库对应表存入，联系通过join实现
#+BEGIN_SRC java
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class BillingDetails {
    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;
    @NotNull
    protected String owner;
}

@Entity
public class BankAccount extends BillingDetails {
    @NotNull
    protected String account;
    @NotNull
    protected String bankname;
    @NotNull
    protected String swift;
}

@Entity
@PrimaryKeyJoinColumn(name = "CREDITCARD_ID")
public class CreditCard extends BillingDetails {
    @NotNull
    protected String cardNumber;
    @NotNull
    protected String expMonth;
    @NotNull
    protected String expYear;
}
#+END_SRC
* Mapping collections
** support collections
*** java.util.Set==>java.util.HashSet
*** java.util.SortedSet==>java.util.TreeSet
may be hibernate only
*** java.util.List==>java.util.ArrayList
*** java.util.Collection==>java.util.ArrayList
*** java.util.Map==>java.util.HashMap
*** java.util.SortedMap==>java.util.TreeMap
may be hibernate only
** collections of value type
*** @ElementCollection
map value type，如果集合存在对应映射表，则一定要加
#+BEGIN_SRC java
@Entity
public class Item {

    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @ElementCollection
    @CollectionTable(
            name = "IMAGE", // Defaults to ITEM_IMAGES
            joinColumns = @JoinColumn(name = "ITEM_ID")) // Default, actually
    @Column(name = "FILENAME") // Defaults to IMAGES
    protected Set<String> images = new HashSet<String>(); // Initialize field here

    public Long getId() {
        return id;
    }

    public Set<String> getImages() {
        return images;
    }

    public void setImages(Set<String> images) {
        this.images = images;
    }
}
#+END_SRC
*** map list
#+BEGIN_SRC java
@Entity
public class Item {

    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @OrderColumn // Enables persistent order, Defaults to IMAGES_ORDER
    @Column(name = "FILENAME")
    protected List<String> images = new ArrayList<String>();

    public Long getId() {
        return id;
    }

    public List<String> getImages() {
        return images;
    }

    public void setImages(List<String> images) {
        this.images = images;
    }
}
#+END_SRC
*** map map
如果是enum，@MapKeyEnumerated
如果是时间类型，@MapKeyTemporal
#+BEGIN_SRC java
@Entity
public class Item {

    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @ElementCollection
    @CollectionTable(name = "IMAGE")  //表名
    @MapKeyColumn(name = "FILENAME") //作键的表中的字段
    @Column(name = "IMAGENAME") // 作值的表中的字段
    protected Map<String, String> images = new HashMap<String, String>();

    public Long getId() {
        return id;
    }

    public Map<String, String> getImages() {
        return images;
    }

    public void setImages(Map<String, String> images) {
        this.images = images;
    }
}
#+END_SRC
*** controll order
#+BEGIN_SRC java
// falling back on the String#compareTo() method
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @Column(name = "FILENAME")
    @org.hibernate.annotations.SortNatural
    protected SortedSet<String> images = new TreeSet<String>();

// 加入SQL排序
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @Column(name = "FILENAME")
    // @javax.persistence.OrderBy // Only one possible order: "FILENAME asc"
    @org.hibernate.annotations.OrderBy(clause = "FILENAME desc")
    protected Set<String> images = new LinkedHashSet<String>();
#+END_SRC
** collections of component
#+BEGIN_SRC java
//指定生成表主键，不指定则是全部进行列进行合成主键，所以不指定时必须设置字段非空@Column(nullable = false)
@org.hibernate.annotations.CollectionId(
 columns = @Column(name = "IMAGE_ID"),
 type = @org.hibernate.annotations.Type(type = "long"),
 generator = Constants.ID_GENERATOR)
 protected Collection<Image> images = new ArrayList<Image>();
#+END_SRC
** entity association
好处是可以使用cascade
*** many to one/one to many
建立联系后可以使用JPQL
select b from Bid b where b.item = :itemParameter 找出全部符合某个item的Bids
**** many to one
#+BEGIN_SRC java
@Entity
public class Bid {

    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @ManyToOne(fetch = FetchType.LAZY) // Defaults to EAGER
    @JoinColumn(name = "ITEM_ID", nullable = false)
    protected Item item;

    @NotNull
    protected BigDecimal amount;

    public Bid() {
    }

    public Bid(BigDecimal amount, Item item) {
        this.amount = amount;
        this.item = item;
    }

    public Item getItem() {
        return item;
    }

    public void setItem(Item item) {
        this.item = item;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    // ...
}

#+END_SRC
**** one to many
第二种主要用在embbeddable类中，因为无法直接反向关联(不是被关联类自身)
***** base on @ManyToOne of other side
#+BEGIN_SRC java
@Entity
public class Item {

    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    protected String name;

    @OneToMany(mappedBy = "item", // Required for bidirectional association, the properties of other side
               fetch = FetchType.LAZY) // The default
    protected Set<Bid> bids = new HashSet<>();

    public Item() {
    }

    public Item(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Set<Bid> getBids() {
        return bids;
    }

    public void setBids(Set<Bid> bids) {
        this.bids = bids;
    }
    // ...
}
#+END_SRC
***** self maintain
#+BEGIN_SRC java
@Entity
public class Item {

    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @NotNull
    protected String name;

    @OneToMany
    @JoinColumn(
        name = "ITEM_ID",
        nullable = false
    )
    @OrderColumn(
        name = "BID_POSITION", // Defaults to BIDS_ORDER
        nullable = false
    )
    public List<Bid> bids = new ArrayList<>();

    public Item() {
    }

    public Item(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Bid> getBids() {
        return bids;
    }
}
#+END_SRC
**** delete
***** orphanRemoval
对于从集合移除后，persist item，并提交事务，hibernate进行脏数据检查并自动删除，少用，因为需要先把数据load进内存，如果清空集合(100条)，需要触发100次
***** @OnDelete
默认级联处理是先加载在删除，hibernate调用SQL调用直接一次删掉
*** one to one
unidirectional
*** cascade
对于删除而言，会先触发加载集合数据，在删除，低效
*** 中间表
@JoinTable
对于多对多可以采取两种策略
1. 为关联表设置对应的实体，然后两侧使用@OneToMany，好处为支持导航
2. 中间表不存在对应实体，关联两侧直接使用@ManyToMany作关联
* lazy loading
仅在能确保数据一定存在的情况下，才具有意义，否则hibernate必须先检查是否为null，在查
* lifecycle
** transient
** persistent
** detached
em.detach(user);
** removed
删了主键会保留，如果需要去掉需要额外配置
* EntityManager
JPA规范，controll/switch data's lifycycle
* Transaction
** db level
** application level
*** pessimistic
**** row lock depend on db vendor
直接上行锁，具体操作由vendor进行处理，hibernate的处理是根据各个DB产商进行比如(h2: select xx from  xxxx for update)的语句级干涉
**** offline lock
ORM framework vendor可以选择直接把锁存进DB/内存结构中
*** optimistic
**** @Version
***** 整数
脏数据检查到就版本号+1，数据库版本必须为-1，否则失败
检查的范围包括任何vlaue type，@OneToMany and @ManyToMany设置了mappedBy时，不列入检测
@org.hibernate.annotations.OptimisticLock(excluded = true)关闭某个字段在检测时，对版本号的影响
***** 时间戳
安全性略差，因为JVM时间无法精确到毫秒，当并发更改发生在1毫秒以内时，第二个事务无法发现版本号事实上已经变更，集群时还涉及到时间同步问题
@org.hibernate.annotations.Type(type="dbtimestamp") 从数据库拿时间
一般是对旧系统/难以更改数据库DDL时的备选方案
***** OptimisticLocking
@org.hibernate.annotations.OptimisticLocking(
    type = org.hibernate.annotations.OptimisticLockType.ALL)// 标注entity，由EntityManager直接判断已经持久化的对象状态，依赖于hibernate
@org.hibernate.annotations.DynamicUpdate
需要开启动态SQL生成，由hibernate根据对象的旧状态进行版本确认，生成如下类似SQL:
#+BEGIN_SRC sql
update ITEM set NAME = 'New Name'
    where ID = 123
        and NAME = 'Old Name'
        and PRICE = '9.99'
        and DESCRIPTION = 'Some item for auction'
        and ...

        and SELLER_ID = 45
#+END_SRC
****** OptimisticLockType
锁的版本脏检查策略(用于动态生成SQL)，包含全部字段做旧检查，脏字段做旧检查(实际中不用，因为如果A改a字段，B改b字段，两者不视为冲突)等
* helper
** PersistenceUtilHelper-hibernate
** HibernateProxyHelper-JPA
* fetch plan
1. lazy是对hibernate的处理提示，具体能否完成取决于多个影响因子
2. eager不一样，是一种强制要求
** lazy
*** association
默认是eager，需要自己指定
1. 只有必须存在的情况下，即optional=false才有价值
2. 如果关联字段允许为null，hibernate会先hit db进行字段存在的确认(失去了lazy loading的意义，存在补充手段，字节码操作)
*** collections
开始调用内部方法时，进行初始化
**** partially close lazy loading
@org.hibernate.annotations.LazyCollection(
       org.hibernate.annotations.LazyCollectionOption.EXTRA
)
size()/isEmpty()/contains()/add()
根据情况进行部分SQL调用，如select count(\*)不触发集合的元素懒加载
*** bytecode enhance
1. @org.hibernate.annotations.Proxy(lazy = false)禁用生成该类的代理类(变相禁止了全部相关的懒加载，作为其他类的关联属性)
2. @LazyToOne(LazyToOneOption.PROXY)标属性，在访问方法上进行指令插入，替换代理懒加载，一般常用在大字符串/文件流层级的处理手段
如果超过一个这么标，当其中一个被访问初始化时，其他也会一起初始化，目前hibernate的该处理不完善
#+BEGIN_SRC java
@Basic(fetch = FetchType.LAZY) // 如果开启了bytecode enhancer才有用
protected String description;
#+END_SRC
** eager
根据语义和连表限制决定是否连表进行查询，超过了hibernate允许的连表限制，其他哪怕是eager也是通过额外的query statement获取数据
* filter data
** cascading state transitions
*** cascade option
**** PERSIST
PERSIST的时候一起PERSIST
**** MERGE
DETACH切到MERGE的时候一起MERGE
**** REFRESH
当手动刷新时，关联的实体都刷新
**** DETACH
detach的时候一起detach
**** REPLICATE
当处于detach，重连时，hibernate判断db是否存在记录，如果存在，存进去，并在事务提交后，新数据刷到db上，如果不存在，使用insert语句插入数据
** LISTENING TO AND INTERCEPTING EVENTS
使用了注解描述拦截方法，能够突然拦截方法对于业务的语义作用，但是缺少了部分type safe
*** callback annotations 
**** @PostLoad
每次load进persist context，包括identifier lookup，lazy loading等场景
**** @PrePersist
**** @PostPersist
**** @PreUpdate, @PostUpdate
**** @PreRemove, @PostRemove
*** interceptors
实现public class EmptyInterceptor implements Interceptor, Serializable {
*** core system event
hibernate的整个核心基于事件驱动实现，如果需要更深入的修改，需要继承对应的event监听器，进行定制
** enver
提供类似版本控制的审计功能，会生成对应实体的版本控制表
** filter
* trick
** refresh
hibernate只有开启了事务，查询前才会进行flush()，可以调用em.flush(entity)从数据库刷新当前实体
** make best to use jdk collection interface
hibernate在内部的实现中，大量涉及了代理，尤其是集合使用了一系列的wrapper替换，如果采用过于具体的类，可能造成兼容性冲突
** n+1 select problem
*** error demo
#+BEGIN_SRC java
List<Item>items = em.createQuery("select i from Item i").getResultList(); // one query statement
for(Item item:items){
  assertNotNull(item.getSeller().getUsername()); //each exucute one query
}
#+END_SRC
*** prefetch
**** batch
#+BEGIN_SRC java
@Entity
@org.hibernate.annotations.BatchSize(size = 10)
@Table(name = "USERS")
public class User{
}
List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM

for (Item item : items) {
    assertNotNull(item.getSeller().getUsername());
    // select * from USERS where ID in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
}

@Entity
public class Item {

    @OneToMany(mappedBy = "item")
    @org.hibernate.annotations.BatchSize(size = 5)
    protected Set<Bid> bids = new HashSet<>();
}

List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM

for (Item item : items) {
    assertTrue(item.getBids().size() > 0);
    // select * from BID where ITEM_ID in (?, ?, ?, ?, ?)
}
#+END_SRC
**** sub select
#+BEGIN_SRC java
@Entity
public class Item {
<enter/>
    @OneToMany(mappedBy = "item")
    @org.hibernate.annotations.Fetch(
       org.hibernate.annotations.FetchMode.SUBSELECT
    )
    protected Set<Bid> bids = new HashSet<>();

    // ...
}
List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM
for (Item item : items) {
    assertTrue(item.getBids().size() > 0); // 访问到其中一个集合，直接触发sub select
    // select * from BID where ITEM_ID in (
    //  select ID from ITEM
    // )
}
#+END_SRC
** cartesian product problem
对于@ManyToOne和@OneToOne，eager都是较为安全的，因为一层中的数据均是作为有效数据，但是对于@OneToMany，导致cartesian product problem，即查询结果的冗余字段膨胀，由于表连接数越大，膨胀得越无法预测
*** multiple select
#+BEGIN_SRC java
@Entity
public class Item{
    @NotNull
    @ManyToOne(fetch = FetchType.EAGER)
    @org.hibernate.annotations.Fetch(
       org.hibernate.annotations.FetchMode.SELECT // Defaults to JOIN
    )
    protected User seller;

    @OneToMany(mappedBy = "item", fetch = FetchType.EAGER)
    @org.hibernate.annotations.Fetch(
       org.hibernate.annotations.FetchMode.SELECT // Defaults to JOIN
    )
    protected Set<Bid> bids = new HashSet<>();
}
#+END_SRC
** dynamic eager fetching
1. 对于实体类的各项fetch plan和策略可能会影响到全局,因为其自身也可能被其他作为属性使用
2. 抽离出各种场景的执行策略，根据场景进行选择执行，在使用时由用户指定策略
#+BEGIN_SRC java
// package-info.java
@org.hibernate.annotations.FetchProfiles({
    @FetchProfile(name = Item.PROFILE_JOIN_SELLER,
        fetchOverrides = @FetchProfile.FetchOverride(
            entity = Item.class,
            association = "seller",
            mode = FetchMode.JOIN
        )),
    @FetchProfile(name = Item.PROFILE_JOIN_BIDS,
        fetchOverrides = @FetchProfile.FetchOverride(
            entity = Item.class,
            association = "bids",
            mode = FetchMode.JOIN
        ))
})

// usage demo
Item item = em.find(Item.class, ITEM_ID); // 执行默认策略

em.clear();
em.unwrap(Session.class).enableFetchProfile(Item.PROFILE_JOIN_SELLER); // 获取时使用连接策略，一并获取seller
item = em.find(Item.class, ITEM_ID);

em.clear();
em.unwrap(Session.class).enableFetchProfile(Item.PROFILE_JOIN_BIDS); // 获取时使用连接策略，一并获取bids和seller，产生了策略交叉
item = em.find(Item.class, ITEM_ID);

#+END_SRC
*** entity graph
使用注解声明哪些懒加载，根据需求进行切换，相比profile，控制性质更弱一些
** shared data cache
*** enable immutable entity cached
正确性取决于类的实现，以及或许操纵，该设置允许直接存对象引用，但是hibernate不判定该类是否从语义真的'不可变'，因此取决于人/该类的设计逻辑
hibernate.cache.use_reference_entries
*** bypass sharead data

* query
** demo
#+BEGIN_SRC java
String searchString = // ...
Query query = em.createQuery(
    "select i from Item i where i.name = :itemName"
).setParameter("itemName", searchString);

// setParameter() is generic method, could bind all type augument except time type
Date tomorrowDate = // ...
Query query = em.createQuery(
    "select i from Item i where i.auctionEnd > :endDate"
).setParameter("endDate", tomorrowDate, TemporalType.TIMESTAMP);
#+END_SRC
** option
*** JPQL
**** 1
select i from Item i
**** restriction
***** normal
select i from Item i where i.name = 'Foo'
*** criteria
**** 1
#+BEGIN_SRC java
CriteriaQuery criteria = cb.createQuery();
criteria.select(criteria.from(Item.class));
Query query = em.createQuery(criteria);
#+END_SRC
**** restriction
***** normal
#+BEGIN_SRC java
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.equal(i.get("name"), "Foo")
); // generate select i.ID, i.NAME, ... from ITEM i where i.NAME = 'Foo'
#+END_SRC
**** criteriaBuilder
***** expression
****** general
******* equail
******* gt
只接收数字
******* greaterThan
能比的全能放
#+BEGIN_SRC java
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.greaterThan(
        i.<Date>get("auctionEnd"),
        tomorrowDate
    )
);
#+END_SRC
******* in
#+BEGIN_SRC java
select u from User u where u.username in ('johndoe', 'janeroe')
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.<String>in(u.<String>get("username"))
        .value("johndoe")
        .value("janeroe")
);
#+END_SRC
******* test null
#+BEGIN_SRC java
select i from Item i where i.buyNowPrice is null
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.isNull(i.get("buyNowPrice"))
);

select i from Item i where i.buyNowPrice is not null
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.isNotNull(i.get("buyNowPrice"))
);
#+END_SRC
******* like
#+BEGIN_SRC java
select u from User u where u.username like 'john%'
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.like(u.<String>get("username"), "john%")
);
#+END_SRC
******* not
#+BEGIN_SRC java
select u from User u where u.username not like 'john%'
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.like(u.<String>get("username"), "john%").not()
);
#+END_SRC
****** multi table
******* cb.tuple(root1,root2)
******* join
******** inner
#+BEGIN_SRC java
select b from Bid b where b.item.seller.username = 'johndoe'
Root<Bid> b = criteria.from(Bid.class);
criteria.select(b).where(
    cb.equal(
        b.get("item").get("seller").get("username"),
        "johndoe"
    )
);
#+END_SRC
******** left join
#+BEGIN_SRC java
select i, b from Item i
    left join i.bids b on b.amount > 100
Root<Item> i = criteria.from(Item.class);
Join<Item, Bid> b = i.join("bids", JoinType.LEFT);
b.on(
    cb.gt(b.<BigDecimal>get("amount"), new BigDecimal(100))
);
criteria.multiselect(i, b);
#+END_SRC
*** native 
EntityManager#createNativeQuery()
#+BEGIN_SRC java
Query query = em.createNativeQuery(
    "select * from ITEM", Item.class
);
#+END_SRC
** nameing query
*** bundle with annotation
可以一批一批用注解绑定到实体类上
#+BEGIN_SRC java
@NamedQueries({
    @NamedQuery(
        name = "findItemById",
        query = "select i from Item i where i.id = :id"
    )
})
@Entity
public class Item {
    // ...
}

@NamedNativeQueries //原生SQL
@NamedNativeQuery 
#+END_SRC
*** xml
#+BEGIN_SRC xml
<!-- orm.xml-->
<entity-mappings
        version="2.1"
        xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
            http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <named-query name="findItems">
        <query><![CDATA[
            select i from Item i
        ]]></query>
        <hint name="javax.persistence.query.timeout" value="60000"/>
        <hint name="org.hibernate.comment" value="Custom SQL comment"/>
    </named-query>

    <named-native-query name="findItemsSQL"
                        result-class="org.jpwh.model.querying.Item">
        <query>select * from ITEM</query>
    </named-native-query>

</entity-mappings>
#+END_SRC
*** mannual register naming query
#+BEGIN_SRC java
EntityManagerFactory#addNamedQuery()
#+END_SRC
*** usage
#+BEGIN_SRC java
Query query = em.createNamedQuery("findItems");
TypedQuery<Item> query = em.createNamedQuery("findItemById", Item.class);
org.hibernate.Query query = session.getNamedQuery("findItems");
#+END_SRC
** hint
* batch
** jpql
*** update
update Item i set i.active = true where i.seller = :s
直接的语句操纵无法刷新hibernate的基于session的缓存实例，二级缓存关于该实体类的缓存全部清掉(哪怕只改到一条，也清掉全部相关)
** native sql
默认直接全部清掉二级缓存，因为无法识别对应的影响实体（JPQL或者criteria通过类注解导航找到表，同时确认缓存区域，native sql在hibernate中无法反向找回entity class，理论上可以做到，所以无法确定缓存区域）
query.addSynchronizedEntityClass(Item.class);
* cache
** session cached
核心: 缓存的是实例，无法跨session，与二级一样基于identifier作key
** shared data cached
核心: 缓存的是字段(以特殊的汇编格式)，在hit时组装回去（合情合理，如果存的是entity，会使得多个session操纵的同一实体互相干扰）
1. 一对一的情况下，得到对应的单个identifier，然后再hit组装
2. 一对多的情况下，得到集合的identifier列表，然后再挨个hit组装
*** enable cache
**** enable in persistence.xml
**** enable in entity
1. 设置实体的缓存开启，@Cacheable
2. 设置缓存策略
**** config cache implement such as ehcache

** query result cache
基于statement的结果缓存，以语句自身作键，该缓存与mybatis的缓存策略很类似
收益率较低，在实际场景中得不到较大的性能提升
* general
** count 原生count
https://www.baeldung.com/hibernate-criteria-queries
* ref
https://blog.csdn.net/weixin_30437847/article/details/95211223 连接池
https://www.cnblogs.com/jianzhixuan/p/6923216.html 数据库wait_timeout