#+TITLE:  maven
#+STARTUP: indent
* convension
** ${basedir}
** ${basedir}/src/main/java
** ${basedir}/src/main/resources
** ${basedir}/src/test/java
** ${basedir}/src/test/resources
** ${basedir}/src/main/webapp/WEB-INF
** ${basedir}/target
** ${basedir}/target/classes
** ${basedir}/target/test-classes
** ~/.m2/repository
* POM
** project
*** modelVersion
与maven自身有关，一般取默认
*** groupId
*** artifactId
*** version
*** parent
与Object类似，全部maven项目都有一个最顶层的公共parent POM，各种插件和命令都封装在里面
*** dependencies
**** dependency
***** groupId
***** artifactId
***** version
***** scope
**** 排除
<exclusions>
  <exclusion>
    <groupId></groupId>
    <artifactId></artifactId>
  </exclusion>
</exclusions>

* cordinate
** groupId
1. 一般为公司域名逆序
** artifactId
** version
* lifecycle
1. 将各个phase进行逻辑分组，各个组中的phase执行均不别的lifecycle的phase
2. lifecycle内定义了顺序，任意其中一个phase执行，会导致声明在前的phase的按序执行，后声明的不受影响
** clean
*** pre-clean
*** clean
*** post-clean
** default
*** validate
*** initialize
*** ...
*** compile
虽然会清掉文件，但是调用的并不是clean周期的clean phase，而是内部实现的另一种机制
*** ...
*** test
** site
*** pre-site
*** site
*** post-site
*** site-deploy
* repository
** local
** remote
1. 私服
2. service repo such as central repo, mirror central repo
* command
mvn [plugin-name]:[goal-name]
* plugin
maven依赖生命周期，而生命周期的各种phase作为统一的接口，具体依赖于具体的插件
* dependency
1. 在进行正常发布的时候，所有指定的依赖都不会进行打包
2. 除非打成完整的执行jar包(诸如spring boot执行包)，或者war包时，会把compile scope的依赖都打进lib
3. scope的传递会影响编译情况, compile能传递
4. 版本冲突，就近优先，路径相同，先声明者有限
** scope
*** compile
编译需要，简单来讲，就是相当于全局了
*** provide
针对war包，来讲，编译需要servlet-api，IDE提示需要servlet-api，但是war包运行的servlet由container负责
*** test
只在test case生效
*** runtime
编译不需要，运行需要，典型例子是各类SPI implement，诸如DB driver
* invert dependency
使用maven指令可以直接过筛
mvn dependency:tree -Dincludes=groupId:B

使用idea的右侧mvn工具栏
展开被隐藏，可以用ctrl + 展开，因为是调用mvn，所以依赖大的情况下很卡，但是方便搜索
* archetype
可以使用archetype插件选择创建时使用的样板目录
* trick
** idea
编译报错/警告
#+BEGIN_SRC xml
<properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>10</maven.compiler.source>
    <maven.compiler.target>10</maven.compiler.target>
</properties>
#+END_SRC
** 控制版本
properties定义属性xxx，version处使用${xxx}
** 多模块处理
创建聚合工程(一般就用父工程),使用聚合工程进行mvn调用
#+BEGIN_SRC xml
  <modules>
    <module>[path]</module>
  </modules>
#+END_SRC
* 注意事项
maven3.6之后不支持http，如果私服是http，需要手动下载降级maven
* script
** upgrade
mvn versions:set -DnewVersion=2.0.2.0 versions:update-child-modules
* proxy
idea指定maven vm参数
** settings.xml
  <proxies>
    <proxy>
        <id>httpproxy</id>
        <active>true</active>
        <protocol>http</protocol>
        <host>127.0.0.1</host>
        <port>10809</port>
        <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy>
  </proxies>