#+TITLE: mq
#+STARTUP: indent
* rabbitmq
** usage
*** java
**** official(simple client)
***** dependency
compile 'com.rabbitmq:amqp-client:5.8.0'
***** usage
****** hello world
#+BEGIN_SRC java
public class Send {
    private final static String QUEUE_NAME = "hello";

    public static void main(String[] argv) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setUsername("admin");
        factory.setHost("47.93.53.45");
        factory.setPassword("password");
        factory.setPort(5672);
        factory.setVirtualHost("/");
        try (Connection connection = factory.newConnection();Channel channel  = connection.createChannel();) {
            channel.queueDeclare(QUEUE_NAME, false, false, false, null);
            String message = "Hello World!";
            channel.basicPublish("", QUEUE_NAME, null, message.getBytes());
            System.out.println(" [x] Sent '" + message + "'");
        }catch (Exception ex){
            ex.printStackTrace();
        }
    }
}


// 开启后是常驻的，关闭需要手动
public class Recv {

    private final static String QUEUE_NAME = "hello";

    public static void main(String[] args) throws Exception {

        ConnectionFactory factory = new ConnectionFactory();
        factory.setUsername("admin");
        factory.setHost("47.93.53.45");
        factory.setPassword("password");
        factory.setPort(5672);
        factory.setVirtualHost("/");

        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        channel.queueDeclare(QUEUE_NAME, false, false, false, null);
        System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

        DeliverCallback deliverCallback = (consumerTag, delivery) -> {
            String message = new String(delivery.getBody(), "UTF-8");
            System.out.println(" [x] Received '" + message + "'");
        };
        channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> {
        });


    }

}
#+END_SRC
****** publish/subscribe
#+BEGIN_SRC java
// Publish/subscribe

// 交换机与队列绑定
#+END_SRC
****** routing
#+BEGIN_SRC java
//Routing, 最后一个参数是routingkey
// 可以同个队列绑定多次，根据不同的routingkey


// 第二个参数指定routingkey
#+END_SRC
****** topic
#+BEGIN_SRC java
//Email通知
//sms通知
//两种都通知


// 符号#可以匹配多个词，符号*可以匹配一个词语

#+END_SRC
****** header
#+BEGIN_SRC java
#+END_SRC