#+TITLE: docker
#+STARTUP: indent
* Docker Registry
Docker Registry contains many Repository
** Repository
*** service provider
https://hub.docker.com official repo, free account can only have one private repo
*** account
docker login
docker logout
*** push
// 如果镜像是魔改已经存在的，必须重新打tag，否则由于namespace不一致，无法上传
docker tag [imageId] [username]/[iamgeName:[tag]]
// 是否私有，得上网站进行设定，整体操作与GitHub类似
docker push [username]/[imageName:[tag]]
* Dockerfile
** FROM
FROM [imageName]
** RUN
RUN [shell] //run this command in build procesure, allow multi RUN
** COPY
COPY [--chown=<user>:<group>] <源路径1>...  <目标路径>
COPY [--chown=<user>:<group>] ["<源路径1>",...  "<目标路径>"]
COPY hom* /mydir/
COPY hom?.txt /mydir/
** ADD
复制压缩包会自动解压, tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下
** CMD
docker run时执行
// 只有一个生效，可被执行时指定进行覆盖
CMD <shell 命令> 
CMD ["<可执行文件或命令>","<param1>","<param2>",...] 
CMD ["<param1>","<param2>",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数
** ENTRYPOINT
类似于 CMD 指令，不可被覆盖， --entrypoint传参
** ENV
ENV <key> <value>
ENV <key1>=<value1> <key2>=<value2>...
** ARG
与ENV作用域不一样，ARG 设置的环境变量仅对 Dockerfile 内有效
** VOLUME
定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。
** EXPOSE
声明端口。docker run -P 时，会自动随机映射 EXPOSE 的端口
** WORKDIR
每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在
** USER
用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。
** HEALTHCHECK
HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令
HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令
HEALTHCHECK [选项] CMD <命令> : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。
** ONBUILD
下个引用该iamge的Dockerfile会调用
ONBUILD <其它指令>
* install
curl -fsSL https://get.docker.com | bash
* tool
** Docker Compose
管理多个container的启动设置
*** install
curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
** Docker Machine
** Docker Swarm
* container
** action
*** start
docker start [cid/cname]
*** stop
docker stop [cid/cname]
*** rm
docker rm [option_list] [cid/cname]
*** run
equal create then start
docker run [option_list] [image_name] [extra_command]
*** create
docker create [option_list] [image_name] [extra_command]
#it return containerId for automation
*** restart
docker restart [cid/cname]
*** exec
docker exec [cid/cname] [shell_command]
*** rename
docker rename [cid/cname] [new_name]
** options
*** --detach
*** --name
*** --daemon/-d
*** --link
legacy feature
docker run -d \
    --link $WEB_CID:insideweb \
    --link $MAILER_CID:insidemailer \
    dockerinaction/ch2_agent
*** --interactive
*** --tty/-t
*** --pid
docker run --pid host busybox:1.29 ps #container read host pid namespace, it's useful for tool for managing system
*** --cidfile
docker create --cidfile /tmp/web.cid nginx
*** --read-only
docker run -d --name wp --read-only wordpress:5.0.0-php7.2-apache #肯定报错，无法写入临时文件，需要挂载进文件系统
*** -v
docker run -d --name wp2 
  --read-only 
  -v /run/apache2 
  --tmpfs /tmp 
  wordpress:5.0.0-php7.2-apache
*** --env/-e
inject enviroment variable
docker create --env WORDPRESS_DB_HOST=<my database hostname> wordpress: 5.0.0-php7.2-apache
*** --restart
exponential backoff strategy to determine restart time #因为该容器是一次性命令，即使用完就进入exit，但是由于设置--restart，所以会导致在指数周期不断重启打印
*** --rm
一次性案例可以用完自动删
docker run --rm --name auto-exit-test busybox:1.29 echo Hello World
*** --hostname
只对container自身解析可见，外部如果需要导航，需要容器外统一配DNS
*** --dns
*** --add-host
test:10.10.10.255
*** -m/--memory 
docker container run -d --name ch6_mariadb \
    --memory 256m \                             
    --cpu-shares 1024 \
    --cap-drop net_raw \
    -e MYSQL_ROOT_PASSWORD=test \
    mariadb:5.5
*** -v
clean volumn
*** --f
force to do something such as rm when the container is running
*** --user/-u
container's user and host's user have same namespace(the root in container equal host root), so better avoid to mount self directory to container
docker container run --rm \
    --user nobody \ 
    busybox:1.29 id 

docker container run --rm \
    -u nobody:nogroup \       #username:group
    busybox:1.29 id            

docker container run --rm \ 
    -u 10000:20000 \         #uid:groupid  
    busybox:1.29 id      
*** --privileged
文件和网络独立，但是对host主机可以进行完全交互
docker container run --rm \
    --privileged \
    ubuntu:16.04 id  
*** --entrypoint
docker container run --name cmd-git --entrypoint git ubuntu-git #指定启动时指定的程序，最后指定的参数不作为程序执行，而是作参传给entrypoint(主要价值是打包镜像后的参数传递)，默认情况下的entrypoint是bash/sh，所以相当于将参数直接当作program执行
*** CMD
主要目的就是设置默认参数，entrypoint设置了就传给entrypoint，外部设置了就传给外部设置的program
CMD ["/var/log/mailer.log"]
*** --health-cmd
外部提供健康检查的方式，使用场景，比如第三方image集成，需要覆盖
docker container run --name=healthcheck_ex -d \
  --health-cmd='nc -vz -w 2 localhost 80 || exit 1' \
  nginx:1.13-alpine
** export/import
把整个container的UFS联合后导出，可以压缩layer成为一个，但是丢失了metadata
docker container export --output contents.tar export-test
docker container import
* image
** from
*** get from registry
[REGISTRYHOST:PORT/][USERNAME/]NAME[:TAG]
docker pull [image identifier]
**** auth
allow multiple account per website
docker login [host:port]
docker logout [host:port]
*** load from file
docker pull busybox:latest
docker save -o myfile.tar busybox:latest
docker rmi busybox:latest
docker load -i myfile.tar
*** load from Dockerfile
**** concept
Dockerfile不是真正的image，而是一种用于指示构建过程的脚本文件(用于将手动attach container，实际过程也是与手动一致，先创建container，然后自动commit，tag，并使用的过程进行了描述化，自动化)，因此，其不具备任何与实际image存储结构的特性，也不受体积限制，具有方便版本控制及移植等多项功能
docker build -t [image_identifier] [the directory of Dockerfile] # 直接进入docker管理的镜像列表
在Dockerfile中使用一定限定的layer切分，有一定的价值，因为Docker builder可以缓存，针对长耗时诸如编译的情况，适当切分，可以使用假设后续步骤出问题了，不至于重新编译一波
**** demo
# An example Dockerfile for installing Git on Ubuntu
FROM ubuntu:latest
LABEL maintainer="dia@allingeek.com"
RUN apt-get update && apt-get install -y git
ENTRYPOINT ["git"]

docker image build --tag ubuntu-git:auto .

# ----

FROM debian:buster-20190910
LABEL maintainer="dia@allingeek.com"
RUN groupadd -r -g 2200 example && \
    useradd -rM -g example -u 2200 example
ENV APPROOT="/app" \
    APP="mailer.sh" \
    VERSION="0.6"
LABEL base.name="Mailer Archetype" \
      base.version="${VERSION}" # ENV引用
WORKDIR $APPROOT
ADD . $APPROOT
ENTRYPOINT ["/app/mailer.sh"]      1
EXPOSE 33333
# Do not set the default user in the base otherwise
# implementations will not be able to update the image
# USER example:example
**** options
***** ---tag/-t
***** --file/-f
point file(default file name is Dockerfile) that content is valid build script
***** --quier
***** --no-cache
关闭cache
***** --target
select execute stage
**** instructions
每个指定都是产生一个层，可以看到
Step 2/4 : LABEL maintainer="dia@allingeek.com"
 ---> Running in 11140b391074
Removing intermediate container 11140b391074
先建了container，然后commit，然后删掉container，因此，写Dockerfile的关键在于尽可能把同一性质的需要配置的命令或者属性在对应符合的instruction中配完，不要分开配，因为docker builder优化力度有限
***** FROM 
FROM [image/layer]
***** LABEL
like container layer
LABEL maintainer="dia@allingeek.com"
***** RUN
each layer delimate, docker builder execute it then commit to new layer
***** ENV
ENV APPROOT="/app" \
    APP="mailer.sh" \
    VERSION="0.6"
contend in same file could refer it using such as ${APP}
***** ENTRYPOINT
ENTRYPOINT ["executable", "param1", "param2"] #一般用这个
ENTRYPOINT command param1 param2 #导致CMD传递的param和外部传入的param全都无视掉
***** COPY
copy host's file to container's
COPY ["./log-impl", "${APPROOT}"] #最后一个最container位置，其他为host位置
***** VOLUMN
VOLUME ["/var/log"]
***** CMD
CMD ["/var/log/mailer.log"]
***** ADD
1. 可以自动解压
2. 可以fetch remote resource(一般不用)
***** ONBUILD
parent image单纯声明，build时，不执行，当child image from这个image时，build的时候在用
ONBUILD COPY [".", "/var/myapp"]
ONBUILD RUN go build /var/myapp
***** ARG
参数化build，比如VERSION等
ARG VERSION=unknown
version=0.6; docker image build -t dockerinaction/mailer-base:${version} \
    -f mailer-base.df \
    --build-arg VERSION=${version} \
***** HEALTHCHECK
FROM nginx:1.13-alpine

HEALTHCHECK --interval=5s --retries=2 \
  CMD nc -vz -w 2 localhost 80 || exit 1

0: success— The container is healthy and ready for use.
1: unhealthy— The container is not working correctly.
2: reserved— Do not use this exit code.
**** multistage dockerfile
需要多个构建结果相互交汇后进行完成(典型比如编译环境JDK和运行环境JRE，可以通过切为两端，第二段拿到第一段的编译后代码+JRE环境，减少镜像大小)，然后复制其中的一些文件到另一个image
#################################################
# Define a Builder stage and build app inside it
FROM golang:1-alpine as builder

# Install CA Certificates
RUN apk update && apk add ca-certificates

# Copy source into Builder
ENV HTTP_CLIENT_SRC=$GOPATH/src/dia/http-client/
COPY . $HTTP_CLIENT_SRC
WORKDIR $HTTP_CLIENT_SRC

# Build HTTP Client
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -v -o /go/bin/http-client

#################################################
# Define a stage to build a runtime image.
FROM scratch as runtime
ENV PATH="/bin"
# Copy CA certificates and application binary from builder stage
COPY --from=builder \
    /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=builder /go/bin/http-client /http-client
ENTRYPOINT ["/http-client"]
*** from container
docker container run --name hw_container ubuntu:latest touch /Helloworld
docker container commit hw_container hw_image
docker container run --rm hw_image ls -l /Helloworld
**** options
***** -a
author name
***** -m
commit message
** principle
1. a image bases on parent image(root image is scrathc provided by docker)
2. a image is set of layers that command run in the parent image
3. 所有layer实质上不可变，image最终也是以layer id为主进行对准，向下完整栈的构建，在创建container，实现了高复用性质。
** tag
for read
*** docker tag
docker tag myuser/myfirstrepo:mytag myuser/mod_ubuntu
*** docker commit
docker container commit mod_ubuntu myuser/myfirstrepo:mytag
*** docker build
** distribute
*** hosted registries
such as Docker.hub
docker image build \
    -t <insert Docker Hub username>/hello-dockerfile \      1
    -f HelloWorld.df \
    .
*** private registries
# docker default registry implementations
docker run -d -p 5000:5000 \
        -v "$(pwd)"/data:/tmp/registry-dev \
        --restart=always --name local-registry registry:2

# fetch remote image and push to local registry
docker image pull dockerinaction/ch9_registry_bound                  
docker image ls -f "label=dia_excercise=ch9_registry_bound"          
docker image tag dockerinaction/ch9_registry_bound \
    localhost:5000/dockerinaction/ch9_registry_bound
docker image push localhost:5000/dockerinaction/ch9_registry_bound  
*** distribute image file
放弃docker engine对镜像的管理，加密，registry等
*** Image source distribution
git等VCS直接管理Dockerfile文件
* service
** create
docker swarm init      # enable swarm mode
docker service create \               
    --publish 8080:80 \
    --name hello-world \
   dockerinaction/ch11_service_hw:v1

docker service scale hello-world=3 # scale instance
** roll out
docker service update \ #rolling out
    --image dockerinaction/ch11_service_hw:v2 \     
    --update-order stop-first \
    --update-parallelism 1 \
    --update-delay 30s \
    hello-world     
** rollback
docker service update \
    --rollback \
    hello-world # 将整个服务的实例切换为上一个desired status

--update-failure-action # 更新时指定失败后回滚
 --update-max-failure-ratio 
* stack
** demo
abstraction about services, networks, volumns etc
#+BEGIN_SRC yaml
version: "3.7"
services:
    postgres:
        image: dockerinaction/postgres:11-alpine
        environment:
            POSTGRES_PASSWORD: example

    mariadb:
        image: dockerinaction/mariadb:10-bionic
        environment:
            MYSQL_ROOT_PASSWORD: example

    adminer:
        image: dockerinaction/adminer:4
        ports:
            - 8080:8080
#+END_SRC
docker stack deploy -c databases.yml my-databases # 启动和更新都是同一条，由Docker自己进行监测变动，并自动建立连接网络

docker stack deploy \ # 当服务列表需要删掉一些，重新设置stack时，需要指定--prune，否则docker没有被compose引用到的resource(service，network,volumn)，全清掉
  -c databases.yml \
  --prune \
  my-databases
** service share volumn such as db software
#+BEGIN_SRC yaml
version: "3.7"
volumes:
    pgdata: # empty definition uses volume defaults，如果不指定volumn，一个service的全部container都是单独新建一个volumn挂上，导致资源无法共享
services:
    postgres:
        image: dockerinaction/postgres:11-alpine
        volumes:
            - type: volume
              source: pgdata # The named volume above
              target: /var/lib/postgresql/data
        environment:
            POSTGRES_PASSWORD: example
    adminer:
        image: dockerinaction/adminer:4
        ports:
            - 8080:8080
        deploy:
            replicas: 1 # Scale down to 1 replica so you can test
#+END_SRC
** config
*** file resources
1. docker config在读取后，设置乐resource name和id标准当前的资源类型
2. docker采用支持稳定依赖的资源管理形式(即如果被利用的文件资源被改了之后，该资源计算出来的id不一致，文件名不变，视为重新部署失败)
3. 解决2的处理有两者，一种是主配置文件读取config时，被配置资源，在改动时，名字也改，从而规避依赖性问题，第二种是整个stack停掉，rm config，重开stack
#+BEGIN_SRC yaml
version: '3.7'

configs:
  env_specific_config:
    file: ./api/config/config.${DEPLOY_ENV:-prod}.yml           1

services:

  api:
      image: ${IMAGE_REPOSITORY:-dockerinaction/ch12_greetings}:api
      ports:
        - '8080:8080'
        - '8443:8443'
      user: '1000'
      configs:
        - source: env_specific_config
          target: /config/config.${DEPLOY_ENV:-prod}.yml        2
          uid: '1000'
          gid: '1000'
          mode: 0400 #default is 0444 - readonly for all users
      secrets: []
      environment:
        DEPLOY_ENV: ${DEPLOY_ENV:-prod}
#+END_SRC
DEPLOY_ENV=dev docker stack deploy \
    --compose-file docker-compose.yml greetings_dev

docker config
*** secrets
# 私钥
cat api/config/insecure.key | \
    docker secret create ch12_greetings-svc-prod-TLS_PRIVATE_KEY_V1 -
vnyy0gr1a09be0vcfvvqogeoj
docker secret inspect ch12_greetings-svc-prod-TLS_PRIVATE_KEY_V1
docker config create \
    ch12_greetings_svc-prod-TLS_CERT_V1 api/config/insecure.crt
5a1lybiyjnaseg0jlwj2s1v5m
# 公钥
docker config create \
    ch12_greetings_svc-prod-TLS_CERT_V1 api/config/insecure.crt

# 启动
DEPLOY_ENV=prod docker stack deploy \
    --compose-file docker-compose.yml \
    --compose-file docker-compose.prod.yml \
    greetings_prod
* pipeline
** all in one
git clone https://github.com/dockerinaction/ch10_patterns-for-building-images.git 
docker image build -t dockerinaction/ch10:all-in-one \
    --file all-in-one.df .
** Separate build and runtime images
* inspect
docker ps
docker log [cid/cname]
docker ps --latest --quiet
docker ps -a
docker inspect --format "{{.State.Running}}" wp
docker logs -f backoff-detector
docker top lamp-test
docker container diff image-dev
docker image history ubuntu-git:removed
docker service inspect hello-world
** Container
*** check
**** docker ps
-a 看全部，默认看运行中的
**** docker logs -f [containerId]
-f与tail类似，看deamon内的输出情况
**** docker port [containerId]
**** docker top [containerId]
**** docket inspect [containerId]
返回描述container整体的JSON文件
* share data
** local filesystems
CONF_SRC=~/example.conf; \
CONF_DST=/etc/nginx/conf.d/default.conf; \

LOG_SRC=~/example.log; \
LOG_DST=/var/log/nginx/custom.host.access.log; \
docker run -d --name diaweb \
  --mount type=bind,src=${CONF_SRC},dst=${CONF_DST} \
  --mount type=bind,src=${LOG_SRC},dst=${LOG_DST} \
  -p 80:80 \
  nginx:latest

CONF_SRC=~/example.conf; \
CONF_DST=/etc/nginx/conf.d/default.conf; \
LOG_SRC=~/example.log; \
LOG_DST=/var/log/nginx/custom.host.access.log; \
docker run -d --name diaweb \
  --mount type=bind,src=${CONF_SRC},dst=${CONF_DST},readonly=true \     1
  --mount type=bind,src=${LOG_SRC},dst=${LOG_DST} \
  -p 80:80 \
  nginx:latest
** in-memory filesystems
docker run --rm \
    --mount type=tmpfs,dst=/tmp,tmpfs-size=16k,tmpfs-mode=1770 \
    --entrypoint mount \
    alpine:latest -v
** volumn that managed by docker engine
*** demo
docker volume create \                                      
    --driver local \                                        
    logging-example                                         

docker run --name plath -d \                                
    --mount type=volume,src=logging-example,dst=/data \     
    dockerinaction/ch4_writer_a                             

docker run --rm \
    --mount type=volume,src=logging-example,dst=/data \     
    alpine:latest \                                         
    head /data/logA                                         

cat "$(docker volume inspect \
    --format "{{json .Mountpoint}}" logging-example)"/logA  
*** create
docker volume create \                
--driver local \                 
    --label example=location \        
    location-example


docker run -d \
    --volume cass-shared:/var/lib/cassandra/data \     #创建容器的时候自动建立
    --name cass1 \
    cassandra:2.2

docker run --name fowler \
    --mount type=volume,dst=/library/PoEAA \
    --mount type=bind,src=/tmp,dst=/library/DSL \
    alpine:latest \
    echo "Fowler collection created."
docker run --name knuth \
    --mount type=volume,dst=/library/TAoCP.vol1 \ #匿名volume
    --mount type=volume,dst=/library/TAoCP.vol2 \
    --mount type=volume,dst=/library/TAoCP.vol3 \
    --mount type=volume,dst=/library/TAoCP.vol4.a \
    alpine:latest \
    echo "Knuth collection created"

docker run --name reader \                          
    --volumes-from fowler \                        # 拷贝对应container的挂载volume
    --volumes-from knuth \                          
    alpine:latest ls -l /library/

docker inspect --format "{{json .Mounts}}" reader   
*** clean
anonymous volume auto delete when all container that refer it is delete
docker volume prune --filter example=cassandra #自动检测可被清理的volume，最后的是label
docker volume remove [cid/cname]
*** inspect
docker volume list
docker volume inspect \               
    --format "{{json .Mountpoint}}" \ 
    location-example
*** plugin
用于连接各种文件系统，包括本地，自建云，公有云等各类解决方案
--driver=xxx
**** local
使用本地的文件系统
* network connect
** default networks
*** bridge
*** host
*** none
** scope
*** local
*** global
*** swarm
** user defined bridge
docker network create \
  --driver bridge \
  --label project=dockerinaction \
  --label chapter=5 \
  --attachable \
  --scope local \
  --subnet 10.0.42.0/24 \
  --ip-range 10.0.42.128/25 \
  user-network

docker network connect user-network2 network-explorer # 将ip分发到container，实现connect
** nodeport publishing
默认情况下，container内部使用nat进行了对外部网络的访问，而外部无法直接访问到container，因此需要设置主机对应端口转发进container端口，用来实现了container对外暴露服务
docker run --rm \
  -p 8080 \ #主机随机挑一个端口映射到container的8080
  alpine:3.8 echo "forward ephemeral TCP -> container TCP 8080"

docker run --rm \
  -p 8088:8080/udp \
  alpine:3.8 echo "host UDP 8088 -> container UDP 8080"

docker run --rm \
  -p 127.0.0.1:8080:8080/tcp \
  -p 127.0.0.1:3000:3000/tcp \
  alpine:3.8 echo "forward multiple TCP ports from localhost"

docker port zen_greider[cid/cname] # 检查container的端口映射
* attach and detach
* resources controll
** memory
--memory/-m #限制使用的内存
根据Docker运行平台决定是否启用特性注入swap
** CPU
*** --cpu-shares 
# 设置权重，求和后按百分比，分配执行周期比，即空闲时，完全利用，不足时，朝按比例分配执行
docker container run -d -P --name ch6_wordpress \
--memory 512m \
--cpu-shares 512 \           1
--cap-drop net_raw \
--link ch6_mariadb:mysql \
-e WORDPRESS_DB_PASSWORD=test \
wordpress:5.0.0-php7.2-apache
*** --cpus
# 限制CPU配额使用率
docker container run -d -P --name ch6_wordpress \ 
--memory 512m \
--cpus 0.75 \                
--cap-drop net_raw \
--link ch6_mariadb:mysql \
-e WORDPRESS_DB_PASSWORD=test \
wordpress:5.0.0-php7.2-apache
*** --cpuset-cpus
# 限制container在CPU指定核心运行，save context switch cost
# Start a container limited to a single CPU and run a load generator
docker container run -d \
    --cpuset-cpus 0 \                                   
    --name ch6_stresser dockerinaction/ch6_stresser

# Start a container to watch the load on the CPU under load
docker container run -it --rm dockerinaction/ch6_htop
** device
--device
docker container run -it --rm \
    --device /dev/video0:/dev/video0 \     1
    ubuntu:16.04 ls -al /dev
** sharing memory
docker container run -d -u nobody --name ch6_ipc_producer \ 
    --ipc shareable \
    dockerinaction/ch6_ipc -producer

docker container run -d --name ch6_ipc_consumer \ 
    --ipc container:ch6_ipc_producer \ 
    dockerinaction/ch6_ipc -consumer
* concept
** portability
1. 对于依赖于系统级别的软件分发，无法做到完全适配 
2. docker原生运行在linux上（使用了linux），为windows和macos提供了各自特定的虚拟机
** pid namespace
each container has its own namespace
** state
*** created
*** running
*** paused
*** restarting
*** exited
*** removing
** env variable better than link
* ref
[[https://learning.oreilly.com/library/view/docker-in-action/9781617294761/][Docker in Action, Second Edition]]
https://stackoverflow.com/questions/65272764/ports-are-not-available-listen-tcp-0-0-0-0-50070-bind-an-attempt-was-made-to
* general
docker run --publish 8080:80 --name hello-world [image]

docker update --restart=always mongo-dev
docker --tail 100 [pid/pname]
docker logs -f [pid/name] //all logs
# 跑完就删除
docker run -it --rm  top.gobrad/questionnaire /bin/bash 
docker image build --tag qqqq .

# 删除全部
docker rm -f $(docker ps -aq)

docker container ls -a

docker cp 
* docker-compose