#+TITLE: git
#+STARTUP: indent
* install
** win10
*** chocolatey
choco install git
** centos
* config
** --global
当前系统用户的全部repo生效
git config --global user.name "smile2333"
git config --global user.email "hj980959100@gmail.com"
git config --global --list
** --system
系统全部用户生效, command同上
** --local
当前repo生效, command同上
* repo
** local
** remote
** create
git init repoName
git init 当前目录转化为repo
** 版本库
** 工作区
** remote
git push remoteRepo localBranchName:remoteBranchName
git push localBranchName和remoteBranchName同名时，可以直接简写
git push -u orgin localBranchName[:remoteBranchName] 本地新建推送到远程分支，同时将远程分支设置当前分支的上游分支，当remoteBranchName不写时，代表同名
git remote add origin repoName[such as git@github.com:smile-2333/qa_client.git]
git remote -v
git remote rm [repoName]
*** 跟踪分支
将远程分支的信息保存在本地的分支概念
git branch -avv
*** 普通分支
实际工作的分支，如果存在remote repo，则可以将其对应到一个跟踪分支上，然后通过git push/fetch进行操作
*** 自建远程仓库
// create
mkdir  project.git
cd  project.git
git  --bare inti

// 本地项目
git remote add origin [username]@[host]:[path]/project.git
git push origin master
* command
git log --oneline
git cat-file -t hashCodeSeg 查看hashCode对应的git对象类型
git cat-file -p hashCodeSeg 查看hashCode对应的git对象内容
git rev-parse hashCodeSeg/branchName 获取完整的hashCode/分支对应的hashCode
git ls-files -s 查看当前索引区的索引的对象
git reset --hard hashCodeSeg
git reflog 查看全部的提交
git commit -amd '注释内容' 直接暂存，并提交
git mv fileName1 fileName2 改名工作区文件，然后也暂存
git rm fileName 删除文件，并将变更暂存
git hash-object [target]
git cherry-pick [hash]
* branch
git branch
git branch -v
git branch branchName 创建基于分支的新分支
git checkout branchName 切到到指定分支
git checkout -b branchName 创建并同时切换到分支
git branch -d branchName 合并后，基本上都可以把特性分支(开发概念)删掉了，如果还没合并，会警告，只能使用下个命令强制删除
git branch -D branchName
** merge
git merge branchName 将指定分支合并到当前分支
git merge --no-ff branchName 即使满足fast-forward，也整出新提交
git merge --ff-only branchName fast-forward，才能merge成功
git merge -no-commit branchName 没冲突才合并
*** fast-forward
** conflicts
*** 取消
git merge --aborr
*** testfile

* HEAD
使位于.git/head的一种逻辑概念，用于确定当前工作在哪个分支上，指向.git/refs/heads下的分支之一(该目录代表了当前所开辟的分支，内容为指向对应的commit对象)
** detached HEAD
当直接指向commit对象而非分支时
git checkout hashCodeSeg 直接切换到对象commit对象
git checkout -b branchName 在当前的匿名分支变更后，作为新分支保存
git checkout branchName hashCodeSeg 将指定的commit对象直接创建一个新分
** HEAD~
当前最新提交的上一次，同理可得HEAD~~,HEAD~~~，更长的写法
HEAD==HEAD~0
HEAD~==HEAD~1
HEAD~~==HEAD~2
HEAD~~~==HEAD~3
* diff
git diff 比较当前工作区和暂存区的全部文件内容差异
git diff -- fileName 只比较一个文件
git diff HEAD 比较工作区与最新提交的差异
git diff hashCodeSeg 同上，也是从工作区开始比
git diff --cached 比较暂存区与最新提交的差异
git diff --cached hashCodeSeg 从暂存区开始比，其他同上
git diff hashCodeSeg1 hashCodeSeg2 比较两次提交的内容差异
git diff hashCodeSeg HEAD
git diff branchName1 branchName2 比较两个分支的差异
* 撤销
git reset (--mixed) HEAD 取消暂存区的所有文件变更，让其跟上一次最新提交保持一致(工作区和暂存区一定不一致)
git reset HEAD -- fileName 同上，但是只撤销单一文件
git reset --hard HEAD 工作区和暂存区一起丢掉所有变更(工作区和暂存区一定一致)
git reset --mixed/hard commitId 当前分支的最新提交变为指定的commitId
git reset --mixed/hard commitId -- fileName 不会导致上述情况，但是文件会切换过去
git reset --soft commitId 只改当前的最新提交，暂存区和工作区不动

git restore -- glob 将通配符匹配的工具区的文件回滚到与暂存区一致，旧版本不是restore而是checkout，暂存区变了则是撤销
git restore --staged glob 同上，但是是将暂存区回滚到与当前分支的最新提交
* 托管
** bitbucket
git remote add origin git@bitbucket.org:smile2333/rabbitmqdemo.git
git push -u origin master
** github
* principle
** git对象
*** type
**** blob 
一个blob就是由一个文件转换而来，blob对象中只会存储文件的数据，而不会存储文件的元数据。
**** tree
一个tree就是由一个目录转化而来，tree对象中只会存储一层目录的信息，它只存储它的直接文件和直接子目录的信息，但是子目录中的内容它并不会保存。
**** commit 
一个commit就是一个我们所创建的提交，它指向了一个tree，这个tree保存了某一时刻项目根目录中的直接文件信息和直接目录信息，也就是说，这个tree会指向直接文件的blob对象，并且指向直接子目录的tree对象，子目录的tree对象又指向了子目录中直接文件的blob，以及子目录的直接子目录的tree，依此类推。
*** 哈希码
标识每个git对象
* genral
#+BEGIN_SRC bash
#剔除被误加入VCS的文件，-r递归
git rm -r --cached .gradle 

#统计代码增减数量
git log --author="huangjie" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }' -

# 全部统计
git log --format='%aN' | sort -u | while read name; do printf '%-14s\t' "$name"; git log --author="$name" --pretty=tformat: --numstat | awk '{add += $1; subs += $2; loc += $1 - $2} END {printf "added lines: %-15s removed lines: %-15s total lines: %-15s\r\n", add, subs, loc}' -; done

#统计实际代码行数，需要cloc插件
git ls-files | xargs cloc 

#+END_SRC
** local untrack file
git update-index --assume-unchanged build/conf/a.conf
git update-index --assume-unchanged build/conf/b.conf
git ls-files -v | grep -e "^[hsmrck]"
https://stackoverflow.com/questions/10879783/git-doesnt-ignore-2-specifically-named-files