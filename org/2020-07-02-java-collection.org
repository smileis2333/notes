#+TITLE:  java collection
#+STARTUP: indent
分析版本openjdk11.0.6
* hierarchy
- Iterable
  - Collection
    - List
    - Set
      - SortedSet
      - NavigableSet
    - Queue
      - Deque
- Map
  - SortedMap
  - NavigableMap
- Iterator
  - ListIterator
- RandomAccess
* LinkedList
** 查找
检查index边界，>0 <size
从first开始迭代，直接迭代次数满足index
** 遍历
用first开始迭代
** 插入
是结尾->插入尾部
插入中间
** 删除
获取前驱，后继，前驱指向后继
* ArrayList
** modCount
modCount如字面意思，是修改次数，因为该容器是线程不安全的，所以modCount可以在remove或者其他情况下，检车modCount是否与迭代器Itr开始时，不一致，则说明，有其他的在动，直接抛ConcurrentModificationException
** 扩容机制为一般
** 插入
*** append
modCount++
确保是否需要扩容，是就扩容，然后复制，最后在加元素
*** 指定位置插入，其他部分往后挪
** 删除
** 遍历
* HashMap
** hash处理
拿到hashcode后，经过移位和异或运算，生成hash值
** 插入
** 扩容机制
1. 在最开始空的时候调用默认值1<<4进行空间开辟
2. 之后，当到达阈值时，每次扩容为最小的2的n次幂，大于元素总数，然后进行重排
** 序列化
** trick
1. 1.7及之前是经典的哈希表实现，1.8开始改为桶+链表/红黑树
2. 1.7 hash实现不良
3. 桶大小必须为2^n原因为，作取模时，使用了位运算
4. 1.8 hash实现为取得hashCode之后，将高位部分和低位部分进行异或
* PriorityQueue
完全二叉树，用数组实现，根据父节点，左节点，右节点的可完全推导决定
leftNo = parentNo*2+1
rightNo = parentNo*2+2
parentNo = (nodeNo-1)/2

[[file:~/study-record/img/PriorityQueue_sigup_process.png][siftup process]] 添加过程，加到底部，在从底部，往父节点走
[[file:~/study-record/img/PriorityQueue_poll.png][poll process]] 移除过程，拿到根节点，最后一个填进根节点，从父节点往下走

在添加和移除的时候需要调整位置，防止对堆结构的破坏
* LinkedHashMap
继承了HashMap，重写了NewNode方法，并将全部Entry链接起来，降低了迭代的代价
* TreeMap
* collections
** Collection
#+BEGIN_SRC java
public interface Collection<E> extends Iterable<E>{  
  boolean add(E element);   
  Iterator<E> iterator();   
  //. . .
}
#+END_SRC
** Iterator
#+BEGIN_SRC java
public interface Iterator<E>{   
  E next();   
  boolean hasNext();   
  void remove();   
  default void forEachRemaining(Consumer<? super E> action);
}
#+END_SRC
* WeakHashMap
该类的保存是弱引用，若其他在其他地方的引用已取消，该类的元素可以被垃圾收集器回收
* Map views
* TreeMap
* Maps
** Map views
出于Java本身数据结构设计的影响，Map本身不隶属于Collection接口，但是获得其对象的key的collectin或者值的colletion，或者，或者的Entry的集合
Set<K>keySet()
Collection<V>values()
Set<Map.Entry<K,V>> entrySet()
** WeakHashMap
该类的保存是弱引用，若其他在其他地方的引用已取消，该类的元素可以被垃圾收集器回收
* views and wrapper
借助view的概念，使用将对于抽取出来的子集合影响到父集合身上(清除父集合创建出来的子view，父集合跟着清掉)，以及Map映射为Collection的操作
** small collections
#+BEGIN_SRC java
List<String> names = List.of("Peter", "Paul", "Mary");
Set<Integer> numbers = Set.of(2, 3, 5);
#+END_SRC
** subranges
** Unmodifiable Views
改了就抛异常
** Synchronized Views
创建出线程安全的可用集合view
** Checked Views
#+BEGIN_SRC java
var strings = new ArrayList<String>();
ArrayList rawList = strings; 
rawList.add(new Date()) // 能通过编译

List<String> safeStrings =Collections.checkedList(strings, String.class);
ArrayList rawList = safeStrings;rawList.add(new Date()); // checked list throws aClassCastException
rawList.add(new Date()); // checked list throws a ClassCastException
#+END_SRC
* algorithms
java.util.Collections
** sort and shuffle
static <T extends Comparable<? super T>> voidsort(List<T> elements)
static void shuffle(List<?> elements)
static void shuffle(List<?> elements, Random r)
** binarySearch
static <T extends Comparable<? super T>> intbinarySearch(List<T> elements, T key)
static <T> int binarySearch(List<T> elements, T key,Comprator<? super T>c)
** simple algorithms
static <T extends Comparable<? super T>> Tmin(Collection<T> elements)
static <T extends Comparable<? super T>> Tmax(Collection<T> elements)
static <T> min(Collection<T> elements,Comparator<? super T> c)
static <T> void copy(List<? super T> to, List<T>from)
static <T> void fill(List<? super T> l, T value)
static <T> boolean addAll(Collection<? super T>c, T... values)
static <T> boolean replaceAll(List<T> l, ToldValue, T newValue)
static int indexOfSubList(List<?> l, List<?> s)
static int lastIndexOfSubList(List<?> l, List<?>s)
static void swap(List<?> l, int i, int j)
static void reverse(List<?> l)
static void rotate(List<?> l, int d)
static int frequency(Collection<?> c, Object o) // 统计数目
boolean disjoint(Collection<?> c1, Collection<?>c2) // 没有交集
default boolean removeIf(Predicate<? super E>filter)
* bulk operation
coll1.removeAll(coll2);

var result = new HashSet<String>(firstSet);
result.retainAll(secondSet);
taffMap.keySet().removeAll(terminatedIDs);
relocated.addAll(staff.subList(0, 10));
* general
converting between collections and array
#+BEGIN_SRC java
String[] values = . . .;
var staff = new HashSet<>(List.of(values));
Object[] values = staff.toArray();

String[] values = (String[]) staff.toArray(); // ERROR
staff.toArray(new String[staff.size()]); // OK
#+END_SRC