#+TITLE: jenkins
#+STARTUP: indent
* pre-requirement
** openjdk
*** install
**** debian9
apt-get update
apt-get install openjdk-8-jdk
** docker
*** install
**** debian9
apt-get remove docker docker-engine docker.io containerd runc
apt-get update
apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io
**** ubuntu
apt-get update
apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io
** install
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -

* usage
** start
java -jar jenkins.war --httpPort=8080
** kill
kill $(ps aux|grep java|grep jenkins |awk '{print $2}')
** plugin
*** post build task
*** publisher over ssh
** config
一、jenkins安装

1.下载jenkins.war

2.（安装好jdk）

3.启动jenkins.war：cmd---java -jar jenkins.war

4.选择安装插件Install suggested plugins

5.设置账号和密码，完成jenkins安装

二、github token生成

6.生成token：登录github---Setting---Personal Access Token---Generate new token（添加有读写权限的token：勾选repo和admin：repo_hook）

7.github hook设置：github---要构建的项目---Setting---Webhooks---增加一个webhook（Payload URL输入jenkins访问url）

三、jenkins配置

8.jenkins github server配置：系统管理---系统设置---GitHub---Add GitHub Sever---(Credentials)Add---Kind选择“secret text”---Secret输入步骤6中生成的token---Test connetion，测试是否配置成功

三、构建项目

构建一个自由风格的软件项目url

9.General设置：输入项目名称，project url输入github上项目网址

10.源码管理：选择git---repository url(github上---项目---Clone or download)---credential（添加一个github读写权限的账号(必须要，否则不可运行)：Kind选择Username with password）---源码库浏览---选择githubweb---URL输入git上项目网址

11.构建触发器：选择GitHub hook trigger for GITScm polling

12.构建环境：选择Use secret text(s) or file(s)---Add---secret text，选择之前添加的那个secret text

13.保存

14.构建项目，测试是否成功
** script
#+BEGIN_SRC bash
pid=$(ps aux|grep java|grep jenkins_demo-0.0.1-SNAPSHOT |awk '{print $2}')
if [ "$pid" ];then
	kill $pid
fi
java -jar build/libs/jenkins_demo-0.0.1-SNAPSHOT.jar &
#+END_SRC
* schedule
1. 默认构建可以设置时区，但不能带参
2. param schedul插件可以带参，但是不能带时区
tzselect设置时区

需要设置JAVA_OPTS带-Duser.timezone=Asia/Shanghai
00 8 * * *%BRANCH=dev;BUILD_ENV=TEST;MODULE=all
10 8 * * *%BRANCH=dev;BUILD_ENV=DEV;MODULE=all
00 13 * * *%BRANCH=dev;BUILD_ENV=TEST;MODULE=all
10 13 * * *%BRANCH=dev;BUILD_ENV=DEV;MODULE=all
00 20 * * *%BRANCH=dev;BUILD_ENV=TEST;MODULE=all
10 20 * * *%BRANCH=dev;BUILD_ENV=DEV;MODULE=all
* jenkinsfile
jenkin支持的pipeline语法，支持声明式和scirpt(groovy)
对于复杂的构建，有较强的表示

!!!对于复杂的多分支，需要额外的支持，比如集中化管理jenkinsfile，处理传参数，目前还是鸡肋，包括刷新jenkinsfile，具有极大的复杂度

#+BEGIN_SRC groovy
pipeline {
  agent any
  parameters {
    booleanParam(name: 'Refresh',
            defaultValue: false,
            description: '刷新部署流程，刷新后需要在按一下部署')
    choice(name: 'ENV', choices: ['dev', 'test'], description: '部署环境')
    choice(name: 'BRANCH', choices: ['dev','bo-test','bo-test2'], description: '部署分支')
  }
  stages {
    stage('checkout') {
      steps {
        git(url: 'https://github.com/smile-2333/questionnaire.git', branch: "${params.BRANCH}", credentialsId: '111222')
      }
    }
    stage('Read Jenkinsfile') {
      when {
        expression { return params.Refresh == true }
      }
      steps {
        echo("stop")
      }
    }
    stage('Run Jenkinsfile') {
      when {
        expression { return params.Refresh == false }
      }
      stages {
        stage('package') {
          agent {
            docker {
              image 'adoptopenjdk/openjdk11:jdk-11.0.10_9-alpine-slim'
              args '-v /root/.gradle:/root/.gradle'
            }

          }
          steps {
            script {
              echo "${params.BRANCH}"
              echo 'current jdk'
              sh 'java -version'
              sh 'chmod +x ./gradlew'
              echo 'current gradle status'
              sh './gradlew --status'

              echo 'package start'
              sh './gradlew build -x test --warning-mode all'
              echo 'package end'
            }
          }
        }
        stage('build docker image') {
          agent none
          steps {
            echo 'start build image'
            sh 'docker context ls'
            echo 'end build image'
          }
        }

      }
    }
  }
}
#+END_SRC