#+TITLE: hikaricp
#+STARTUP: indent
* javassist
https://github.com/brettwooldridge/HikariCP/issues/1198
1. Resultset等相关接口要求覆盖50+method，而实际需要覆盖的可能就几个，因此，将类抽象为abstract，然后覆盖对应的方法，而实际最终的代码，在用javasist生成出来
2. JDBC如果由于标准的迭代加了新的接口，可以自动被加入，而不用作多版本更新
3. 字节码部分提速(次要部分)

* ConcurrentBag 
ConcurrentBag --> 两端无锁获取+SynchronousQueue来处理并发大的情况
ThreadLocal<List<Object>> threadList; 无锁，在PoolEntry返回时，缓存到ThreadLocal
CopyOnWriteArrayList<T> sharedList; 无锁，存储PoolEntry用于全部线程共享
SynchronousQueue<T> handoffQueue;  并发解决，在前两段失败时，进入阻塞获取，直到能拿到新连接(连接扩充/连接返还时)
** 本质就是用 two cache --> one syn来包装一个容器
*** 类List
在控制容器集合的时候，正常使用类似List的API，如add，remove
*** 三段控制
在实际作为池供外部获取时，使用borrow和requite，并在内部使用了三种机制来进行同步管理
**** borrow & requite
尝试从ThreadLocal拿 --> 拿不到从sharedList拿 --> 在拿不到从handoffQueue拿(block)

看看有没有人在(waiter)，有的话给handoffQueue，完成数据库连接的线程派发-->如果没人等，则直接放到threadList里面

* leak detect
泄露检测
默认值为0即禁用
在获取连接时，设置ProxyConnection，准确来讲是Javassist生成的HakariProxyConnection，并进行定时任务的绑定，超时即认定为泄露


https://jacksonpuppy.com/2017-11-05/datasource-hikari.html
* metrics
** dropwizard
** jmx
